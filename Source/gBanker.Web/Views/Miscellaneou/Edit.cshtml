@model gBanker.Web.ViewModels.MiscellaneouViewModel

@{
    ViewBag.Title = "Miscellaneous Edit";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var office = Model == null ? null : Model.officeListItems;
    var center = Model == null ? null : Model.centerListItems;
    var product = Model == null ? null : Model.productListItems;
    var centerName = "";
    if (center.Where(o => o.Value == Model.CenterID.ToString()).Any())
    { centerName = center.Where(o => o.Value == Model.CenterID.ToString()).FirstOrDefault().Text; }
    var officeName = "";
    if (office.Where(o => o.Value == Model.OfficeID.ToString()).Any())
    { officeName = office.Where(o => o.Value == Model.OfficeID.ToString()).FirstOrDefault().Text; }
}
<style type="text/css">
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba( 255, 255, 255, .8 ) url('http://i.stack.imgur.com/FhHRx.gif') 50% 50% no-repeat;
    }

    /* When the body has the loading class, we turn
    the scrollbar off with overflow:hidden */
    body.loading {
        overflow: hidden;
    }
    textarea{
        resize:none;
    }
        /* Anytime the body has the loading class, our
    modal element will be visible */
        body.loading .modal {
            display: block;
        }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        var MemberName =  @Html.Raw(Json.Encode(ViewData["MemberName"]));

        $("#memberAutoComplete").val(MemberName);
        gBankerDatePicker("TrxDate");



        $("#ProductID").change(function () {
            var ProductID = $("#ProductID option:selected").val();
            if (ProductID == 102) {
                $("#Amount").val(5);
            } else if (ProductID == 101) {
                $("#Amount").val(10);
            }
        });


        $("#memberAutoComplete").blur(function () {
            var member = $("#memberAutoComplete").val();
            ///function

            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "SpecialLoanCollection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {

                        if (data.length == 1) {
                            $("#memberAutoComplete").val(data[0].MemberName);
                            $("#MemberID").val(data[0].MemberID);

                            // alert(data[0].MemberID);
                            if ($("#CenterID").val() > 0 && data[0].MemberID > 0) {

                                GetProductList(data[0].MemberID, $("#CenterID").val());
                            }
                            CalcLoanTerm();
                        }
                        else if (data.length == 0) {
                            // alert("No member found.");
                            $("#MemberID").val("");

                        }
                        else {
                            // alert("More than one member found with the given Member code.");
                            $("#MemberID").val("");
                        }
                    }
                });
            }
        });
        $("#memberAutoComplete").autocomplete({
            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "SpecialLoanCollection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            },
            change: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            }
        });



    });// END document Ready
</script>
@Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right" })

<h2 class="page-title">Edit Miscellaneous</h2>

@using (Html.BeginForm("Edit", "Miscellaneou", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group" style="display :none">
            @Html.LabelFor(model => model.MiscellaneousID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MiscellaneousID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MiscellaneousID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OfficeID, htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("txtOficeName", officeName, new { @class = "form-control", @readonly = true })
                    @Html.HiddenFor(model => model.OfficeID)
                    @*@Html.ValidationMessageFor(model => model.OfficeID, "", new { @class = "text-danger" })*@
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterID, htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("txtCenterName", centerName, new { @class = "form-control", @readonly = true })
                    @Html.HiddenFor(model => model.CenterID)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Member", htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("memberAutoComplete", "", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.MemberID)
                    @Html.TextBoxFor(model => model.MemberID, new { @style = "display:none" })
                    @Html.ValidationMessageFor(model => model.MemberID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.ProductID, product, new { @class = "form-control", onchange = "SetProductid(this.value);" })
                    @Html.Hidden("hfProdId")

                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4" style="display:none">
                <div class="form-group">
                    @Html.LabelFor(model => model.TrxDate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.TrxDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TrxDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">


            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    @*@Html.TextAreaFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })*@
                </div>
            </div>


        </div>
        <div class="form-group">
            <div class="form-group form-action">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/gbUtility")
}
