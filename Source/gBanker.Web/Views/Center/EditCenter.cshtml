@model gBanker.Web.ViewModels.CenterViewModel

@{
    ViewBag.Title = "Edit Center";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var offc = Model == null ? null : Model.OfficeList;
    var geo = Model == null ? null : Model.GeoLocationList;
    var emp = Model == null ? null : Model.EmployeeList;
    var day = Model == null ? null : Model.CollectionDayList;
    var status = Model == null ? null : Model.CenterStatusList;
    var org = Model == null ? null : Model.OrganizerList;
    var colltype = Model == null ? null : Model.CenterCollectionType;
    var centertype = Model == null ? null : Model.CenterTypeList;

    var country = Model == null ? null : Model.CountryList;
    var div = Model == null ? null : Model.DivisionList;
    var dist = Model == null ? null : Model.DistrictList;
    var upo = Model == null ? null : Model.UpozillaList;
    var uni = Model == null ? null : Model.UnionList;
    var vill = Model == null ? null : Model.VillageList;


}
<script src="~/Scripts/wickedpicker.js"></script>
<link href="~/Content/wickedpicker.css" rel="stylesheet" />

<script type="text/javascript">
    @*function LoadCenterByOfficeId(office_id) {
        var ddlCenters = $("#CenterID");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetCenterList", "Member", "http")',
            data: { office_id: office_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlCenters.html('');
                $.each(data, function (id, option) {
                    ddlCenters.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.status + "/" + error);
            }
        });
    }*@
    function centerType() {

      var centerType = $("#CenterTypeID option:selected").val();

        $.ajax({
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetLastCenterCode", "Center")',
            type: "GET",
            dataType: 'json',
            async: true,
            data: { centerType: centerType},

            success: function (result) {
                $("#CenterCode").val(result.centerCode);
               // $("#CenterTypeID").val(result.CenterTypeID);
            },
            error: function (error) {
                alert('error');
            }
        });
    }


    function LoadDivisionByCountry(country_id) {
        var ddlDivision = $("#DivisionCode");
       
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDivisionList", "Member", "http")',
            data: { country_id: country_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDivision.html('');
                $.each(data, function (id, option) {
                    ddlDivision.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function LoadDistrictByDivision(div_id) {
        var ddlDistrict = $("#DistrictCode");
       // var ddlDistrictPer = $("#PerDistrictCode");
        var ddlPlaceOfBirth = $("#PlaceOfBirth");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDistrictList", "Member", "http")',
            data: { div_id: div_id },
            dataType: 'json',
            async: false,
            success: function (data) {
                $("#loading").hide();
                ddlDistrict.html('');
                //ddlDistrictPer.html('');
                ddlPlaceOfBirth.html('');
                $.each(data, function (id, option) {
                    ddlDistrict.append($('<option></option>').val(option.Value).html(option.Text));
                    //ddlDistrictPer.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlPlaceOfBirth.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function LoadUpozillaByDistrict(dis_id) {
        var ddlUpozilla = $("#UpozillaCode");
        //var ddlUpozillaPer = $("#PerUpozillaCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUpozillaList", "Member", "http")',
            data: { dis_id: dis_id },
            dataType: 'json',
            async: false,
            success: function (data) {
                $("#loading").hide();
                ddlUpozilla.html('');
                //ddlUpozillaPer.html('');
                $.each(data, function (id, option) {
                    ddlUpozilla.append($('<option></option>').val(option.Value).html(option.Text));
                    //ddlUpozillaPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function LoadUnionByUpozilla(upo_id) {

        var ddlUnion  = $("#UnionCode");
       // var ddlUnionPer = $("#PerUnionCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUnionList", "Member", "http")',
            data: { upo_id: upo_id },
            dataType: 'json',
            async: false,
            success: function (data) {
                $("#loading").hide();
                ddlUnion.html('');
               // ddlUnionPer.html('');
                $.each(data, function (id, option) {
                    ddlUnion.append($('<option></option>').val(option.Value).html(option.Text));
                   // ddlUnionPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function LoadVillageByUnion(uni_id) {
        var ddlVillage = $("#VillageCode");

        //var ddlVillagePer = $("#PerVillageCode");

        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetVillageList", "Member", "http")',
            data: { uni_id: uni_id },
            dataType: 'json',
            async: false,
            success: function (data) {
                $("#loading").hide();
                ddlVillage.html('');
               // ddlVillagePer.html('');
                $.each(data, function (id, option) {
                    ddlVillage.append($('<option></option>').val(option.Value).html(option.Text));
                   // ddlVillagePer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }



    $(document).ready(function () {
        LoadDivisionByCountry(18);

        LoadDistrictByDivision('@Html.Raw(Model.DivisionCode)');
        LoadUpozillaByDistrict('@Html.Raw(Model.DistrictCode)');
        LoadUnionByUpozilla('@Html.Raw(Model.UpozillaCode)');
        LoadVillageByUnion('@Html.Raw(Model.UnionCode)');



        $("#CountryID").change(function () {
            var country_id = $("#CountryID").val();
            if (country_id > 0) {
                LoadDivisionByCountry(country_id);
            }
        });
        $("#DivisionCode").change(function () {
            var div_id = $("#DivisionCode").val();
            if (div_id > 0) {
                LoadDistrictByDivision(div_id);
                $('#hfDivisionCode').val(div_id);
            }
        });
        $("#DistrictCode").change(function () {
            var dis_id = $("#DistrictCode").val();
            if (dis_id > 0) {
                LoadUpozillaByDistrict(dis_id);
                // $('#PerDistrictCode').val(dis_id);
            }
        });
        $("#UpozillaCode").change(function () {
            var upo_id = $("#UpozillaCode").val();
            if (upo_id > 0) {
                LoadUnionByUpozilla(upo_id);
                // $("#PerUpozillaCode").val(upo_id);LoadDivisionByCountry
            }
        });
        $("#UnionCode").change(function () {
            var uni_id = $("#UnionCode").val();
            if (uni_id > 0) {
                LoadVillageByUnion(uni_id);
            }
        });
        $("#VillageCode").change(function () {
            var Vil_id = $("#VillageCode").val();
            if (Vil_id > 0) {

            }
        });


        $("#CenterTypeID").change(function () {
            centerType()
        });


        //Timepicker
        var options = {// now: "12:35", //hh:mm 24 hour format only, defaults to current time
            twentyFour: true, //Display 24 hour format, defaults to false
            upArrow: 'wickedpicker__controls__control-up', //The up arrow class selector to use, for custom CSS
            downArrow: 'wickedpicker__controls__control-down', //The down arrow class selector to use, for custom CSS
            close: 'wickedpicker__close', //The close class selector to use, for custom CSS
            hoverState: 'hover-state', //The hover state class to use, for custom CSS
            title: 'Timepicker', //The Wickedpicker's title,
            showSeconds: false, //Whether or not to show seconds,
            secondsInterval: 1, //Change interval for seconds, defaults to 1  ,
            minutesInterval: 1, //Change interval for minutes, defaults to 1
            beforeShow: null, //A function to be called before the Wickedpicker is shown
            show: null, //A function to be called when the Wickedpicker is shown
            clearable: false, //Make the picker's input clearable (has clickable "x")
        };
        $("#CenterTime").wickedpicker(options);
        //$("#Edit-CenterTime").wickedpicker(options);
        //$("input[name='CenterTime']").wickedpicker(options);

        $("#CollectionDate").datepicker(
            {
                dateFormat: "dd-M-yy",
                showAnim: "scale",
            });
        $("#OperationStartDate").datepicker(
            {
                dateFormat: "dd-M-yy",
                showAnim: "scale",
            });



        // AutoComplete



        // AUTO Complete for Member SELECTION
        $("#memberAutoCompleteCenterChief").blur(function () {
            var member = $("#memberAutoCompleteCenterChief").val();
            var CenterId = '@Html.Raw(Model.CenterID)';
            if (CenterId == "0" || CenterId == "") {
                return;
            }


            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: CenterId },
                    minLength: 1,
                    success: function (data) {
                        if (data.length == 1) {
                            $("#memberAutoCompleteCenterChief").val(data[0].MemberName);
                            $("#CenterChief").val(data[0].MemberID);

                        }
                        else if (data.length == 0) {

                            $("#CenterChief").val("");
                        }
                        else {

                            $("#CenterChief").val("");
                        }
                    }
                });
            }
        });
        $("#memberAutoCompleteCenterChief").autocomplete({

            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoCompleteCenterChief").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoCompleteCenterChief").val(ui.item.label);
                $("#CenterChief").val(ui.item.value);

                return false;
            },
            change: function (event, ui) {
                $("#memberAutoCompleteCenterChief").val(ui.item.label);
                $("#CenterChief").val(ui.item.value);
                return false;
            }
        });

        // END Auto Complete



        /// ASSO Center Chief

        // AUTO Complete for Member SELECTION
        $("#memberAutoCompleteAssoCenterChief").blur(function () {
            var member = $("#memberAutoCompleteAssoCenterChief").val();
            var CenterId = '@Html.Raw(Model.CenterID)';
            if (CenterId == "0" || CenterId == "") {
                return;
            }


            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: CenterId },
                    minLength: 1,
                    success: function (data) {
                        if (data.length == 1) {
                            $("#memberAutoCompleteAssoCenterChief").val(data[0].MemberName);
                            $("#AssoCenterChief").val(data[0].MemberID);

                        }
                        else if (data.length == 0) {

                            $("#AssoCenterChief").val("");
                        }
                        else {

                            $("#AssoCenterChief").val("");
                        }
                    }
                });
            }
        });
        $("#memberAutoCompleteAssoCenterChief").autocomplete({

            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoCompleteAssoCenterChief").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoCompleteAssoCenterChief").val(ui.item.label);
                $("#AssoCenterChief").val(ui.item.value);

                return false;
            },
            change: function (event, ui) {
                $("#memberAutoCompleteAssoCenterChief").val(ui.item.label);
                $("#AssoCenterChief").val(ui.item.value);
                return false;
            }
        });

        // END Auto Complete



        ///End Asso Center Chief


        /// Panel Member

        // AUTO Complete for Member SELECTION
        $("#memberAutoCompleteAssoPanelMember").blur(function () {
            var member = $("#memberAutoCompletePanelMember").val();
            var CenterId = '@Html.Raw(Model.CenterID)';
            if (CenterId == "0" || CenterId == "") {
                return;
            }


            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: CenterId },
                    minLength: 1,
                    success: function (data) {
                        if (data.length == 1) {
                            $("#memberAutoCompletePanelMember").val(data[0].MemberName);
                            $("#PanelMember").val(data[0].MemberID);

                        }
                        else if (data.length == 0) {

                            $("#PanelMember").val("");
                        }
                        else {

                            $("#PanelMember").val("");
                        }
                    }
                });
            }
        });
        $("#memberAutoCompletePanelMember").autocomplete({

            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetActiveMemberListAuto", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoCompletePanelMember").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoCompletePanelMember").val(ui.item.label);
                $("#PanelMember").val(ui.item.value);

                return false;
            },
            change: function (event, ui) {
                $("#memberAutoCompletePanelMember").val(ui.item.label);
                $("#PanelMember").val(ui.item.value);
                return false;
            }
        });

        // END Auto Complete



        ///End Panel Member




    }); // END Document Ready

    $(window).load(function () {

        $("#DivisionCode option[value='" + '@Html.Raw(Model.DivisionCode)' + "']").prop('selected', 'selected');
        $("#DistrictCode option[value='" + '@Html.Raw(Model.DistrictCode)' + "']").prop('selected', 'selected');
        $("#UpozillaCode option[value='" + '@Html.Raw(Model.UpozillaCode)' + "']").prop('selected', 'selected');
        $("#UnionCode option[value='" + '@Html.Raw(Model.UnionCode)' + "']").prop('selected', 'selected');
        $("#VillageCode option[value='" + '@Html.Raw(Model.VillageCode)' + "']").prop('selected', 'selected');






         $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberById", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: false,
                    data: { memberid: '@Html.Raw(Model.CenterChief)', centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                  success: function (data) {
                            $("#memberAutoCompleteCenterChief").val(data[0].MemberName);
                           // $("#CenterChief").val(data[0].MemberID);
                    }
                });

        $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberById", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: false,
                    data: { memberid: '@Html.Raw(Model.AssoCenterChief)', centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                  success: function (data) {
                      $("#memberAutoCompleteAssoCenterChief").val(data[0].MemberName);
                           // $("#AssoCenterChief").val(data[0].MemberID);
                    }
        });

        $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberById", "SavingInstallmentCorrection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: false,
                    data: { memberid: '@Html.Raw(Model.PanelMember)', centerId: '@Html.Raw(Model.CenterID)' },
                    minLength: 1,
                  success: function (data) {
                      $("#memberAutoCompletePanelMember").val(data[0].MemberName);
                           // $("#AssoCenterChief").val(data[0].MemberID);
                    }
        });




    }); // END Window


</script>

@Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right" })

<h2 class="page-title">Samity Update</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row" style="display:none;">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterTypeID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.CenterTypeID, centertype, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CenterTypeID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterCode, htmlAttributes: new { @class = "control-label", @readonly = true })
                    @Html.HiddenFor(model => model.OfficeID)
                    @Html.EditorFor(model => model.CenterCode, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.CenterCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Organizer, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.Organizer, org, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Organizer, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterName, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.CenterName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterNameBng, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.CenterNameBng, colltype, new { @class = "form-control" })
                    @*@Html.EditorFor(model => model.CenterNameBng, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.CenterNameBng, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.GeoLocationID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.GeoLocationID, geo, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GeoLocationID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.EmployeeId, emp, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CollectionDay, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.CollectionDay, day, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CollectionDay, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CollectionDate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.CollectionDate, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.CollectionDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">

                <div class="form-group">
                    @Html.LabelFor(model => model.OperationStartDate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.OperationStartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OperationStartDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterTime, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.CenterTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CenterTime, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterStatus, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.CenterStatus, status, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CenterStatus, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <fieldset>
            <legend> Address </legend>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CountryID, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.CountryID, country, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DivisionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.DivisionCode, div, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DivisionCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DistrictCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.DistrictCode, dist, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DistrictCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.UpozillaCode, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.UpozillaCode, upo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UpozillaCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.UnionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.UnionCode, uni, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UnionCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <lable class="control-label">Village / Street</lable>
                        @Html.DropDownListFor(model => model.VillageCode, vill, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.VillageCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CenterAddress, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.CenterAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CenterAddress, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group" style="display:none">
                    @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control", @placeholder = "House/Holding No, Road No, Village Name, Post office etc.", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                </div>


            </div>
        </fieldset>

        <fieldset>
            <legend> Chief Information </legend>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Center Chief", htmlAttributes: new { @class = "control-label" })
                        @Html.TextBox("memberAutoCompleteCenterChief", "", new { @class = "form-control" })
                        @Html.HiddenFor(x => x.CenterChief)
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Asso Center Chief", htmlAttributes: new { @class = "control-label" })
                        @Html.TextBox("memberAutoCompleteAssoCenterChief", "", new { @class = "form-control" })
                        @Html.HiddenFor(x => x.AssoCenterChief)
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Panel Member", htmlAttributes: new { @class = "control-label" })
                        @Html.TextBox("memberAutoCompletePanelMember", "", new { @class = "form-control" })
                        @Html.HiddenFor(x => x.PanelMember)
                    </div>
                </div>
            </div>


        </fieldset>


        <div class="row">
            <div class="col-lg-12">
                <div class="form-group form-action">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>

        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
}
