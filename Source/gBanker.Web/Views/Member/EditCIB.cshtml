@model gBanker.Web.ViewModels.CIBViewModel

@{
    ViewBag.Title = "Edit CIB";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var offc = Model == null ? null : Model.OfficeList;
    var cntr = Model == null ? null : Model.CenterList;
    var grp = Model == null ? null : Model.GroupList;
    var country = Model == null ? null : Model.CountryList;
    var div = Model == null ? null : Model.DivisionList;
    var dist = Model == null ? null : Model.DistrictList;
    var upo = Model == null ? null : Model.UpozillaList;
    var uni = Model == null ? null : Model.UnionList;
    var vill = Model == null ? null : Model.VillageList;
    var mem_cat = Model == null ? null : Model.MemberCategoryList;
    var gen = Model == null ? null : Model.GenderList;
    var mem_status = Model == null ? null : Model.MemberStatusList;
    var cityzen = Model == null ? null : Model.CityzenshipList;
    var home = Model == null ? null : Model.HomeTypeList;
    var groupTyp = Model == null ? null : Model.GroupTypeList;
    var edu = Model == null ? null : Model.EducationList;
    var eco = Model == null ? null : Model.EconomicActivityList;
    var pob = Model == null ? null : Model.PlaceOfBirthList;
    var marry = Model == null ? null : Model.MaritalStatusList;
    var memCat = Model == null ? null : Model.MemCategoryList;
}
<style>
    .thumb-img {
        width: 60%;
        height: auto;
    }

    /* css for image */
    #container {
        position: relative;
    }

    #video, #canvas {
        width: 320px;
        position: absolute;
    }

    #capture {
        background-color: red;
        position: relative;
    }
    /* css for image */
</style>
<script src="@Url.Content("~/Scripts/jquery.webcam.js")">
</script>
<script>
    function popupCamera() {
        $("#webcamDiv").dialog({
            autoOpen: false,
            height: 350,
            width: 350,
            modal: true,
            buttons: {
                "Capture": function () {
                    onCapture();
                },
                "Close": function () {
                    video.pause();
                    video.src = "";
                    localstream.getTracks()[0].stop();
                    $(this).dialog("close");
                }
            }
        });

        var showPopup = "True";
        if (showPopup == "True") {
            $("#webcamDiv").dialog('open');
        }
    }//End of Show Popup Camera

</script>

<script type="text/javascript" src="~/Scripts/jquery.webcam.js"></script>
<script src="~/Scripts/jquery.form.min.js"></script>
<script type="text/javascript">


    function GetChoiseOptionsList() { // Load ddl
        var ddlChoseFinService = $("#ddlChoseFinService");
        // var AnotherMFIMemberCheck = $("#AnotherMFIMemberCheck");

        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetOptionList", "Survey", "http")',
            data: {},
            dataType: 'json',
            async: true,
            success: function (Result) {

                ddlChoseFinService.html('');

                // AnotherMFIMemberCheck.html('');

                //ddlChoseTax.append($('<option></option>').val("0").html("Please Select"));
                $.each(Result, function (id, option) {
                    ddlChoseFinService.append($('<option></option>').val(option.Value).html(option.Text));
                });


                // FOR INITIAL DATA

                var hfIsAnyFS = $("#IsAnyFS").val();

                if (hfIsAnyFS == "True") {
                    $("#ddlChoseFinService option[value='" + 1 + "']").prop('selected', 'selected');

                    $("#dvServiceDetails").show();
                }
                else {

                    $("#ddlChoseFinService option[value='" + 2 + "']").prop('selected', 'selected');

                    //$("#ddlChoseFinService").val(2);
                    $("#dvServiceDetails").hide();
                }





            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function GetIdentiyList() { // Load ddl
        var ddlIdentityType = $("#ddlIdentityType");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetIdentityTypeList", "Survey", "http")',
            data: {},
            dataType: 'json',
            async: true,
            success: function (Result) {
                ddlIdentityType.html('');
                // ddlIdentityType.append($('<option></option>').val("0").html("Please Select"));
                $.each(Result, function (id, option) {
                    ddlIdentityType.append($('<option></option>').val(option.Value).html(option.Text));
                });

                $("#ddlIdentityType").val($("#IdentTypeID").val());
                if ($("#ddlIdentityType option:selected").val() == 1 || $("#ddlIdentityType option:selected").val() == 5 || $("#ddlIdentityType option:selected").val() == 2) {
                    $("#dvIdCardIssue").hide();

                }
                else {
                    // SHOW
                    $("#dvIdCardIssue").show();

                }

            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }


    // image code
    var video;
    var isCaptured = false;
    var canvas;
    var ctx;
    var width = 300;
    var height = 200;
    var localstream;

    function initiateWebCam() {
        isCaptured = false;
        canvas = document.getElementById('canvas');
        video = document.getElementById('video');
        canvas.style.display = 'none';
        video.style.display = 'block';
        ctx = canvas.getContext('2d');
        if (isCaptured == false) {
            canvas.style.display = 'none';
        }

        navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia ||

                             navigator.mediaDevices.getUserMedia ||
                             navigator.webkitGetUserMedia ||
                             navigator.mozGetUserMedia ||
                             navigator.msGetUserMedia || navigator.oGetUserMedia;

        if (navigator.getUserMedia) {
            navigator.getUserMedia({ audio: false, video: { width: width, height: height } },
                function (stream) {
                    localstream = stream;

                    if (isCaptured == false) {
                        video = document.querySelector('video');
                        video.srcObject = stream;
                        video.onloadedmetadata = function (e) {
                            video.play();
                        };
                    }
                },
                function (err) {
                    console.log("WEBCAM - error occurred: " + err.name);
                }
            );
        } else {
            console.log("WEBCAM - getUserMedia API not supported");
        }


    }


    function onCapture() {
        debugger;
        isCaptured = true;
        canvas.style.display = 'block';
        video.style.display = 'none';
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
        //canvas.toBlob((blob) => {
        //    console.log(blob);
        //});
        let base64Image = canvas.toDataURL();
        console.log(window.jQuery);
        if (window.captureType == 'image') {
            document.getElementById('thumbnil').src = base64Image;
        } else {
            document.getElementById('FingerThumb').src = base64Image;
        }

        video.pause();
        video.src = "";
        localstream.getTracks()[0].stop();
        window.jQuery("#webcamDiv").dialog('close')

    }



    function GetMemberCode(office_id, group_id) {
        $.ajax({
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetLatestMemCode", "Member", "http")',
            type: "POST",
            dataType: 'json',
            async: true,
            data: { office_id: office_id, group_id: group_id },
            success: function (last_code) {
                $("#MemberCode").val(last_code);
                //alert($("#MemberCode").val());
            },
            error: function (request, status, error) {
                $("#loading").hide();
                $("#dvMessage").attr('class', 'failed');
                $("#dvMessage").html(request.statusText);
                $("#dvMessage").show();
            }
        });
    }
    function LoadCenterByOfficeId(office_id) {
        var ddlCenters = $("#CenterID");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetCenterList", "Member", "http")',
            data: { office_id: office_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlCenters.html('');
                $.each(data, function (id, option) {
                    ddlCenters.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.status + "/" + error);
            }
        });
    }
    function LoadGroupByOfficeId(office_id) {
        var ddlCenters = $("#GroupID");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetGroupList", "Member", "http")',
            data: { office_id: office_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlCenters.html('');
                $.each(data, function (id, option) {
                    ddlCenters.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.status + "/" + error);
            }
        });
    }
    function LoadDivisionByCountry(country_id, division_id) {
        var ddlDivision = $("#DivisionCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDivisionList", "Member", "http")',
            data: { country_id: country_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDivision.html('');
                $.each(data, function (id, option) {
                    ddlDivision.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (division_id > 0 && division_id != null) {
                    ddlDivision.val(division_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function LoadDivisionByCountryPer(country_id, division_id) {
        var ddlDivision = $("#PerDivisionCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDivisionList", "Member", "http")',
            data: { country_id: country_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDivision.html('');
                $.each(data, function (id, option) {
                    ddlDivision.append($('<option></option>').val(option.Value).html(option.Text));
                });

                if (division_id > 0 && division_id != null) {
                    ddlDivision.val(division_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function LoadDistrictByDivision(div_id, dis_id) {
        var ddlDistrict = $("#DistrictCode");
        var ddlDistrictPer = $("#PerDistrictCode");
        //var ddlPlaceOfBirth = $("#PlaceOfBirth");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDistrictList", "Member", "http")',
            data: { div_id: div_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDistrict.html('');
                ddlDistrictPer.html('');

                //ddlPlaceOfBirth.html('');
                $.each(data, function (id, option) {
                    ddlDistrict.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlDistrictPer.append($('<option></option>').val(option.Value).html(option.Text));

                    //ddlPlaceOfBirth.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (dis_id > 0 && dis_id != null) {
                    ddlDistrict.val(dis_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    @*function LoadDistrictByDivision(div_id) {
        var ddlDistrict = $("#DistrictCode");
        var ddlDistrictPer = $("#PerDistrictCode");
        var ddlPlaceOfBirth = $("#PlaceOfBirth");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDistrictList", "Member", "http")',
            data: { div_id: div_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDistrict.html('');
                ddlDistrictPer.html('');
                ddlPlaceOfBirth.html('');
                $.each(data, function (id, option) {
                    ddlDistrict.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlDistrictPer.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlPlaceOfBirth.append($('<option></option>').val(option.Value).html(option.Text));


                });


            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@

    function LoadDistrictByDivisionPer(div_id, dis_id) {
        var ddlDistrict = $("#PerDistrictCode");
        //var ddlPlaceOfBirth = $("#PlaceOfBirth");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDistrictList", "Member", "http")',
            data: { div_id: div_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDistrict.html('');
                //ddlPlaceOfBirth.html('');
                $.each(data, function (id, option) {
                    ddlDistrict.append($('<option></option>').val(option.Value).html(option.Text));
                    //ddlPlaceOfBirth.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (dis_id > 0 && dis_id != null) {
                    ddlDistrict.val(dis_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }



    @*function LoadDistrictByDivisionPer(div_id) {
        var ddlDistrictPer = $("#PerDistrictCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetDistrictList", "Member", "http")',
            data: { div_id: div_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlDistrictPer.html('');
                $.each(data, function (id, option) {
                    ddlDistrictPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@



    function LoadUpozillaByDistrict(dis_id, upo_id) {
        var ddlUpozilla = $("#UpozillaCode");
        var ddlUpozillaPer = $("#PerUpozillaCode");

        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUpozillaList", "Member", "http")',
            data: { dis_id: dis_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUpozilla.html('');
                ddlUpozillaPer.html('');

                $.each(data, function (id, option) {
                    ddlUpozilla.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlUpozillaPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (upo_id > 0 && upo_id != null) {
                    ddlUpozilla.val(upo_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    @*function LoadUpozillaByDistrict(dis_id) {
        var ddlUpozilla = $("#UpozillaCode");
        var ddlUpozillaPer = $("#PerUpozillaCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUpozillaList", "Member", "http")',
            data: { dis_id: dis_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUpozilla.html('');
                ddlUpozillaPer.html('');
                $.each(data, function (id, option) {
                    ddlUpozilla.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlUpozillaPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@

    function LoadUpozillaByDistrictPer(dis_id, upo_id) {
        var ddlUpozilla = $("#PerUpozillaCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUpozillaList", "Member", "http")',
            data: { dis_id: dis_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUpozilla.html('');
                $.each(data, function (id, option) {
                    ddlUpozilla.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (upo_id > 0 && upo_id != null) {
                    ddlUpozilla.val(upo_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    @*function LoadUpozillaByDistrictPer(dis_id) {
        var ddlUpozillaPer = $("#PerUpozillaCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUpozillaList", "Member", "http")',
            data: { dis_id: dis_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUpozillaPer.html('');
                $.each(data, function (id, option) {
                    ddlUpozillaPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@

    function LoadUnionByUpozilla(upo_id, uni_id) {
        var ddlUnion = $("#UnionCode");
        var ddlUnionPer = $("#PerUnionCode");

        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUnionList", "Member", "http")',
            data: { upo_id: upo_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUnion.html('');
                ddlUnionPer.html('');
                $.each(data, function (id, option) {
                    ddlUnion.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlUnionPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (uni_id > 0 && uni_id != null) {
                    ddlUnion.val(uni_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    @*function LoadUnionByUpozilla(upo_id) {

        var ddlUnion = $("#UnionCode");
        var ddlUnionPer = $("#PerUnionCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUnionList", "Member", "http")',
            data: { upo_id: upo_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUnion.html('');
                ddlUnionPer.html('');
                $.each(data, function (id, option) {
                    ddlUnion.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlUnionPer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@

    function LoadUnionByUpozillaPer(upo_id, uni_id) {
        var ddlUnion = $("#PerUnionCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetUnionList", "Member", "http")',
            data: { upo_id: upo_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlUnion.html('');
                $.each(data, function (id, option) {
                    ddlUnion.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (uni_id > 0 && uni_id != null) {
                    ddlUnion.val(uni_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function LoadVillageByUnion(uni_id, vil_id) {
        var ddlVillage = $("#VillageCode");
        var ddlVillagePer = $("#PerVillageCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetVillageList", "Member", "http")',
            data: { uni_id: uni_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlVillage.html('');
                ddlVillagePer.html('');

                $.each(data, function (id, option) {
                    ddlVillage.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlVillagePer.append($('<option></option>').val(option.Value).html(option.Text));

                });
                if (vil_id != '0' && vil_id != null) {
                    ddlVillage.val(vil_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    @*function LoadVillageByUnion(uni_id) {
        var ddlVillage = $("#VillageCode");

        var ddlVillagePer = $("#PerVillageCode");

        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetVillageList", "Member", "http")',
            data: { uni_id: uni_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlVillage.html('');
                ddlVillagePer.html('');
                $.each(data, function (id, option) {
                    ddlVillage.append($('<option></option>').val(option.Value).html(option.Text));
                    ddlVillagePer.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }*@

    function LoadVillageByUnionPer(uni_id, vil_id) {
        var ddlVillage = $("#PerVillageCode");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetVillageList", "Member", "http")',
            data: { uni_id: uni_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlVillage.html('');
                $.each(data, function (id, option) {
                    ddlVillage.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (vil_id != '0' && vil_id != null) {
                    ddlVillage.val(vil_id);
                }
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function showMyImage(fileInput) {
        var files = fileInput.files;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var imageType = /image.*/;

            if (file.type.match(imageType)) {
                //continue;
                var size = Math.round(file.size / 1024);
                if (size <= 10000) {
                    var img = document.getElementById("thumbnil");
                    img.file = file;
                    var reader = new FileReader();
                    reader.onload = (function (aImg) {
                        return function (e) {
                            aImg.src = e.target.result;
                        };
                    })(img);
                    reader.readAsDataURL(file);
                }
                else
                    alert('Image file cannot be greater than 100 KB.');
            }
            else {
                $("#ImgFile").replaceWith($("#ImgFile").clone(true));
                alert('Please select a valid image file');
            }

        }
    }
    function showFingerThunbImage(fileInput) {
        var files = fileInput.files;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var imageType = /image.*/;

            if (file.type.match(imageType)) {
                //continue;
                var size = Math.round(file.size / 1024);
                if (size <= 10000) {
                    var img = document.getElementById("FingerThumb");
                    img.file = file;
                    var reader = new FileReader();
                    reader.onload = (function (aImg) {
                        return function (e) {
                            aImg.src = e.target.result;
                        };
                    })(img);
                    reader.readAsDataURL(file);
                }
                else
                    alert('Image file cannot be greater than 100 KB.');
            }
            else {
                $("#ImgFile").replaceWith($("#ImgFile").clone(true));
                alert('Please select a valid image file');
            }

        }
    }
    function IsWindows() {
        var check = false;
        (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    };

    function GetTransactionChoiceList() { // Load ddl
        var ddlTransactionChoice = $("#ddlTransactionChoice");

        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GET_GetTransactionTypeList", "Survey", "http")',
            data: {},
            dataType: 'json',
            async: true,
            success: function (Result) {
                ddlTransactionChoice.html('');
                ddlTransactionChoice.html('');
                //ddlChoseTax.append($('<option></option>').val("0").html("Please Select"));
                $.each(Result, function (id, option) {
                    ddlTransactionChoice.append($('<option></option>').val(option.Value).html(option.Text));

                });


                var hfTransactionChoiceId = $("#TransactionChoiceId").val();
                if (hfTransactionChoiceId != "")
                    $("#ddlTransactionChoice").val(hfTransactionChoiceId);


            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function GetFinServiceChoiceList() { // Load ddl
        var ddlFinServiceChoice = $("#ddlFinServiceChoice");

        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetServiceUseReasonList", "Survey", "http")',
            data: {},
            dataType: 'json',
            async: true,
            success: function (Result) {
                ddlFinServiceChoice.html('');
                ddlFinServiceChoice.html('');
                //ddlChoseTax.append($('<option></option>').val("0").html("Please Select"));
                $.each(Result, function (id, option) {
                    ddlFinServiceChoice.append($('<option></option>').val(option.Value).html(option.Text));
                });

               // var hfFinServiceChoiceId = $("#hfFinServiceChoiceId").val();
                var hfFinServiceChoiceId = $("#FinServiceChoiceId").val();
                if (hfFinServiceChoiceId != "")
                    $("#ddlFinServiceChoice").val(hfFinServiceChoiceId);

            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function CheckMandatoryFields() {

        if ($("#MotherName").val() == '') {
            alert("Mother Name is Required.");
            $("#MotherName").focuse()
            return false;
        }

        if ($("#MotherNameBN").val() == '') {
            alert("Mother Name Bangla is Required.");
            $("#MotherNameBN").focuse()
            return false;
        }

        if ($("#FatherName").val() == '') {
            alert("Father Name is Required.");
            $("#FatherName").focuse()
            return false;
        }

        if ($("#FatherNameBN").val() == '') {
            alert("Father Name Bangla is Required.");
            $("#FatherNameBN").focuse()
            return false;
        }

        if ($("#FirstName").val() == '') {
            alert("First Name is Required.");
            $("#FirstName").focuse()
            return false;
        }

        if ($("#BanglaName").val() == '') {
            alert("Bangla Name  is Required.");
            $("#BanglaName").focuse()
            return false;
        }

        if ($("#VillageCode").val() == '0' || $("#VillageCode").val() == 0) {
            alert("বর্তমান ঠিকানা   Village / Street  is Required.");
            $("#VillageCode").focuse()
            return false;
        }

        if ($("#PerVillageCode").val() == '0' || $("#PerVillageCode").val() == 0) {
            alert("স্থায়ী ঠিকানা  Village / Street  is Required.");
            $("#PerVillageCode").focuse()
            return false;
        }








    }

    $(document).ready(function () {

        GetIdentiyList();
        GetTransactionChoiceList();
        GetChoiseOptionsList();
        GetFinServiceChoiceList();

        $("#imgcontainer").hide();
        //Hide captured button
        if (IsWindows()) {
            $('#captureImage').hide();
            $('#captureImageFingerThumb').hide();
        }
        else {
            $('#captureImage').show();
            $('#captureImageFingerThumb').show();

        }

        //start of Webcam
        $("#captureImage, #captureImageFingerThumb").click(function (e) {
            window.captureType = $(this).attr('data-type');
            initiateWebCam();
            $("#imgcontainer").show();
            popupCamera();
        });
        //End of Webcam

        var coun_id = $("#CountryID").val();
        var div_id = $("#hfDivisionCode").val();
        var dis_id = $("#hfDistrictCode").val();
        var upo_id = $("#hfUpozillaCode").val();
        var uni_id = $("#hfUnionCode").val();
        var vil_id = $("#hfVillageCode").val();
        var cen_id = $("#CenterID").val();

        if (coun_id != "")
            LoadDivisionByCountry(coun_id, div_id);
        if (div_id != "")
            LoadDistrictByDivision(div_id, dis_id);
        if (dis_id != "")
            LoadUpozillaByDistrict(dis_id, upo_id);
        if (upo_id != "")
            LoadUnionByUpozilla(upo_id, uni_id);
        if (uni_id != "")
            LoadVillageByUnion(uni_id, vil_id);


        //// FOR PERMANENT ADDRESS /////

        var coun_id2 = $("#PerCountryID").val();
        var div_id2 = $("#hfPerDivisionCode").val();
        var dis_id2 = $("#hfPerDistrictCode").val();
        var upo_id2 = $("#hfPerUpozillaCode").val();
        var uni_id2 = $("#hfPerUnionCode").val();
        var vil_id2 = $("#hfPerVillageCode").val();
        var cen_id2 = $("#CenterID").val();

        if (coun_id2 != "")
            LoadDivisionByCountryPer(coun_id2, div_id2);
        if (div_id2 != "")
            LoadDistrictByDivisionPer(div_id2, dis_id2);
        if (dis_id2 != "")
            LoadUpozillaByDistrictPer(dis_id2, upo_id2);
        if (upo_id2 != "")
            LoadUnionByUpozillaPer(upo_id2, uni_id2);
        if (uni_id2 != "")
            LoadVillageByUnionPer(uni_id2, vil_id2);

        //////  END /////

        $("#dvIdCardIssue").hide();//initially Hide
        $("#ddlIdentityType").change(function () {
            $("#ExpireDate").val("");
            if ($("#ddlIdentityType option:selected").val() == 1 || $("#ddlIdentityType option:selected").val() == 5 || $("#ddlIdentityType option:selected").val() == 2) {
                $("#dvIdCardIssue").hide();

            }
            else {
                // SHOW
                $("#dvIdCardIssue").show();

            }

            $("#IdentTypeID").val($("#ddlIdentityType option:selected").val());

        });



        $("#ddlChoseFinService").change(function () {
            $("#FServiceName").val("");
            $("#txtServiceName").val("");
            $("#FinServiceChoiceId").val(1);

            $("#ddlFinServiceChoice").prop('selectedIndex', 0);

            if ($("#ddlChoseFinService option:selected").val() == 1) {
                $("#dvServiceDetails").show();
                $("#IsAnyFS").val(true);
            }
            else {
                // SHOW
                $("#dvServiceDetails").hide();
                $("#IsAnyFS").val(false);
            }

        });

        $("#ddlFinServiceChoice").change(function () {

            var selectedValue = $("#ddlFinServiceChoice option:selected").val();
            $("#FinServiceChoiceId").val(selectedValue);
        });

        $("#ddlTransactionChoice").change(function () {
            var selectedValue = $("#ddlTransactionChoice option:selected").val();
            $("#TransactionChoiceId").val(selectedValue);
        });



        $("#NationalID").blur(function (e) {

            var ddlIentityTypeId = parseInt($("#ddlIdentityType option:selected").val());
            //alert(ddlIentityTypeId);

            var nationalId = $("#NationalID").val();
            $("span[data-valmsg-for='NationalID']").text('');
            if (ddlIentityTypeId == 1) {
                if (nationalId != '' && nationalId.length != 13 && nationalId.length != 17) {
                    //alert('National Id cannot be blank or less than 10,13&17 characters.');
                    //data-valmsg-for="NationalID"
                    $("span[data-valmsg-for='NationalID']").text('National Id cannot be blank or less than 13 or 17 characters.');
                    $("#NationalID").focus();
                    return false;
                }
            }
            else if (ddlIentityTypeId == 2) {
                if (nationalId != '' && nationalId.length != 10) {
                    //alert('National Id cannot be blank or less than 10,13&17 characters.');
                    //data-valmsg-for="NationalID"
                    $("span[data-valmsg-for='NationalID']").text('Smart Card Id cannot be blank or less than 10 characters.');
                    $("#NationalID").focus();
                    return false;
                }

            }
            var mid = $("#MemberID").val();
            //if (nationalId != '' && nationalId.length >= 10) {
            $("#loading").show();
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("CheckNationalIdEditMode", "Member", "http")',
                data: { nationalId: nationalId, mid: mid },
                dataType: 'json',
                async: true,
                success: function (cnt_status) {
                    $("#loading").hide();
                    if (cnt_status == 'Yes') {
                        alert('National Id already exists');
                        $("#NationalID").val('');
                        $("#NationalID").focus();
                    }
                },
                error: function (request, status, error) {
                    $("#loading").hide();
                    alert(request.statusText + "/" + request.statusText + "/" + error);
                    $("#NationalID").focus();
                }
            });
            //}
            //else {
            //    alert('National Id cannot be blank or less than 10 characters.');
            //    $("#NationalID").focus();
            //}



        });


        $("#PhoneNo").blur(function (e) {
            var PhoneNo = $("#PhoneNo").val();
            var mid = $("#MemberID").val();
            $("#loading").show();
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("CheckPhoneNoEditMode", "Member", "http")',
                data: { PhoneNo: PhoneNo, mid: mid },
                dataType: 'json',
                async: true,
                success: function (cnt_status) {
                    $("#loading").hide();
                    if (cnt_status == 'Yes') {
                        alert('Phone No already exists');
                        $("#PhoneNo").val('');
                        $("#PhoneNo").focus();
                    }
                },
                error: function (request, status, error) {
                    $("#loading").hide();
                    alert(request.statusText + "/" + request.statusText + "/" + error);
                    $("#PhoneNo").focus();
                }
            });

        });
        $("#BirthDate").datepicker(
   {
       dateFormat: "dd-M-yy",
       showAnim: "scale",
       changeMonth: true,
       changeYear: true,
       yearRange: "1950:2025",
       onClose: function () {
           var today = new Date();//new Date($("#ServerCurrentDate").val());
           var birthDate = new Date($("#BirthDate").val());
           //alert(birthDate);
           if (birthDate != 'Invalid Date') {
               var age = today.getFullYear() - birthDate.getFullYear();

               var m = today.getMonth() - birthDate.getMonth();
               if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                   age--;
               }
               if (age >= 18 && age <= 59) {

                   var today = new Date();
                   var birthDate = new Date($("#BirthDate").val());
                   var diff_date = today - birthDate;
                   var years = Math.floor(diff_date / 31536000000);
                   var months = Math.floor((diff_date % 31536000000) / 2628000000);
                   var days = Math.floor(((diff_date % 31536000000) % 2628000000) / 86400000);
                   $("#Result").html(years + " year(s) " + months + " month(s) " + days + " and day(s)").css("color", "green");
                   $("#AsOnDateAge").val(years + " year(s) " + months + " month(s) " + days + " and day(s)");


                   return true;

               }
               else {


                   var today = new Date();
                   var birthDate = new Date($("#BirthDate").val());
                   var diff_date = today - birthDate;
                   var years = Math.floor(diff_date / 31536000000);
                   var months = Math.floor((diff_date % 31536000000) / 2628000000);
                   var days = Math.floor(((diff_date % 31536000000) % 2628000000) / 86400000);
                   $("#Result").html(years + " year(s) " + months + " month(s) " + days + " and day(s)").css("color", "red");;



                   $("#BirthDate").val('');
                   $("#dialog-message").html('<p><span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 50px 0;"></span>Member age is less than 18 or greater than 59.</p>');
                   $("#dialog-message").dialog({
                       modal: true,
                       buttons: {
                           Ok: function () {
                               $(this).dialog("close");
                           }
                       }
                   });
               }
           }
       }
   });
        //$("#BirthDate").datepicker(
        //    {
        //        dateFormat: "dd-M-yy",
        //        showAnim: "scale",
        //        changeMonth: true,
        //        changeYear: true,
        //        yearRange: "1950:2025",
        //        onClose: function () {
        //            var today = new Date($("#ServerCurrentDate").val());
        //            var birthDate = new Date($("#BirthDate").val());
        //            //alert(birthDate);
        //            if (birthDate != 'Invalid Date') {
        //                var age = today.getFullYear() - birthDate.getFullYear();
        //                var m = today.getMonth() - birthDate.getMonth();
        //                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        //                    age--;
        //                }
        //                if (age >= 18 && age <= 59) {
        //                    return true;
        //                }
        //                else {
        //                    $("#BirthDate").val('');
        //                    $("#dialog-message").html('<p><span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 50px 0;"></span>Member age is less than 18 or greater than 59.</p>');
        //                    $("#dialog-message").dialog({
        //                        modal: true,
        //                        buttons: {
        //                            Ok: function () {
        //                                $(this).dialog("close");
        //                            }
        //                        }
        //                    });
        //                }
        //            }
        //        }


        //    });
        $("#JoinDate").datepicker(
            {
                dateFormat: "dd-M-yy",
                showAnim: "scale"
            });
        //$("#JoinDate").val('');
        //LoadCenterByOfficeId($("#OfficeID").val());
        //LoadGroupByOfficeId($("#OfficeID").val());

    $("#ExpireDate").datepicker(
    {
        dateFormat: "dd-M-yy",
        changeMonth: true,
        changeYear: true,
        yearRange: "c-50:c+50",
    });
        $("#ExpireDate").datepicker(
       'setDate', new Date());

        $("#CardIssueDate").datepicker(
        {
            dateFormat: "dd-M-yy",
            changeMonth: true,
            changeYear: true,
            yearRange: "c-50:c+50",
        });
       // $("#CardIssueDate").datepicker(
       //'setDate', new Date());


        $("#CenterID").change(function () {
            var center_id = $("#CenterID").val();
            if (center_id > 0) {
                var grp = $("#CenterID :selected").text().split(',')[0];
                $("#GroupID option:contains(" + grp + ")").attr('selected', 'selected');
                $("#MemberCategoryID").focus();
                //var dd = document.getElementById('GroupID');
                //for (var i = 0; i < dd.options.length; i++) {
                //    if (dd.options[i].text === grp) {
                //        dd.selectedIndex = i;
                //        break;
                //    }
                //}
            }
        });
        $("#CountryID").change(function () {
            var country_id = $("#CountryID").val();
            var division_id = $("#hfDivisionCode").val();

            if (division_id == null) {
                division_id = 0;
            }

            if (country_id > 0) {
                LoadDivisionByCountry(country_id, division_id);
            }
        });
        $("#DivisionCode").change(function () {
            var div_id = $("#DivisionCode").val();
            var dis_id = $("#hfDistrictCode").val();

            if (dis_id == null) {
                dis_id = 0;
            }

            if (div_id > 0) {
                  LoadDistrictByDivision(div_id, dis_id);
                //LoadDistrictByDivision(div_id);

                $('#hfPerDivisionCode').val(div_id);
                $('#hfDivisionCode').val(div_id);
                $('#PerDivisionCode').val(div_id);
            }
        });
        $("#DistrictCode").change(function () {
            var dis_id = $("#DistrictCode").val();
            var upo_id = $("#hfUpozillaCode").val();
            if (dis_id > 0) {
                LoadUpozillaByDistrict(dis_id, upo_id);
                //LoadUpozillaByDistrict(dis_id);

                $('#hfPerDistrictCode').val(dis_id);
                $('#hfDistrictCode').val(dis_id);
                $('#PerDistrictCode').val(dis_id);

            }
        });
        $("#UpozillaCode").change(function () {
            var upo_id = $("#UpozillaCode").val();
            var uni_id = $("#hfUnionCode").val();
            if (upo_id > 0) {
                LoadUnionByUpozilla(upo_id, uni_id);
                //LoadUnionByUpozilla(upo_id);

                $("#PerUpozillaCode").val(upo_id);
                $("#hfUpozillaCode").val(upo_id);
                $("#hfPerUpozillaCode").val(upo_id);

            }
        });
        $("#UnionCode").change(function () {
            var uni_id = $("#UnionCode").val();
            var vil_id = $("#hfVillageCode").val();
            if (uni_id > 0) {
                LoadVillageByUnion(uni_id, vil_id);

                //LoadVillageByUnion(uni_id);
                $("#PerUnionCode").val(uni_id);
                $("#hfUnionCode").val(uni_id);
                $("#hfPerUnionCode").val(uni_id);


            }
        });

        $("#VillageCode").change(function () {
            var Vil_id = $("#VillageCode").val();
            if (Vil_id > 0) {
                $("#PerVillageCode").val(Vil_id);
                $("#hfVillageCode").val(Vil_id);


            }
        });


        $("#PerVillageCode").change(function () {
            var Vil_id = $("#PerVillageCode").val();
            if (Vil_id > 0) {

                $("#hfPerVillageCode").val(Vil_id);
            }
        });

        var Percountry_id = $("#PerCountryID").val();
        if (Percountry_id == "" || Percountry_id == 0) {
            $("#PerCountryID").val(18);
            var country_id = $("#PerCountryID").val();
            var division_id = $("#PerhfDivisionCode").val();
            LoadDivisionByCountryPer(country_id, division_id);
        }

        $("#PerCountryID").change(function () {
            var country_id = $("#PerCountryID").val();
            var division_id = $("#PerhfDivisionCode").val();

            if (division_id == null) {
                division_id = 0;
            }

            if (country_id > 0) {
                LoadDivisionByCountryPer(country_id, division_id);
            }
        });
        $("#PerDivisionCode").change(function () {
            var div_id = $("#PerDivisionCode").val();
            var dis_id = $("#PerhfDistrictCode").val();

            if (dis_id == null) {
                dis_id = 0;
            }

            if (div_id > 0) {
                LoadDistrictByDivisionPer(div_id, dis_id);
                //LoadDistrictByDivisionPer(div_id);
                $("#hfPerDivisionCode").val(div_id);
            }
        });
        $("#PerDistrictCode").change(function () {
            var dis_id = $("#PerDistrictCode").val();
            var upo_id = $("#PerhfUpozillaCode").val();
            if (dis_id > 0) {
                LoadUpozillaByDistrictPer(dis_id, upo_id);
                //LoadUpozillaByDistrictPer(dis_id);

                $("#hfPerDistrictCode").val(dis_id);
            }
        });
        $("#PerUpozillaCode").change(function () {
            var upo_id = $("#PerUpozillaCode").val();
            var uni_id = $("#PerhfUnionCode").val();
            if (upo_id > 0) {
                LoadUnionByUpozillaPer(upo_id, uni_id);
                $("#hfPerUpozillaCode").val(upo_id);

            }
        });
        $("#PerUnionCode").change(function () {
            var uni_id = $("#PerUnionCode").val();
            var vil_id = $("#PerhfVillageCode").val();
            if (uni_id > 0) {
                LoadVillageByUnionPer(uni_id, vil_id);
                $("#hfPerUnionCode").val(uni_id);

            }
        });

        $("#ZipCode").blur(function () {
            var ZipCode = $("#ZipCode").val();
            $("#PerZipCode").val(ZipCode);
        });

        $("#AddressLine1").blur(function () {
            var AddressLine1 = $("#AddressLine1").val();
            $("#PerAddressLine1").val(AddressLine1);
        });

        $("#AddressLine2").blur(function () {
            var AddressLine2 = $("#AddressLine2").val();
            $("#PerAddressLine2").val(AddressLine2);
        });


        $("#btnSave").click(function (e) {
            e.preventDefault();

            CheckMandatoryFields();
            var file = "";
            var fileFingerThumb = "";

            var files = document.getElementById("thumbnil").src;
            var arr = files.split("/");
            var pic = arr[arr.length - 2];
            if (pic == "Images") {
                file = null;
            } else if (pic == "RetrieveImage") {
                file = null;
            }
            else {
                file = files;
            }
            var base64image = file;



            var fileFingerThumbs = document.getElementById("FingerThumb").src;
            var arr = fileFingerThumbs.split("/");
            var pics = arr[arr.length - 2];
            if (pics == "Images") {
                fileFingerThumb = null;
            } else if (pics == "RetrieveFingerImage") {
                fileFingerThumb = null;
            } else {
                fileFingerThumb = fileFingerThumbs;
            }
            var base64imageFingerThumb = fileFingerThumb;


            $('#MemProfile').ajaxSubmit({
                type: "POST",
                target: '#thumbnil',
                data: { base64image: base64image, base64imageFingerThumb: base64imageFingerThumb },
                dataType: 'json',
                processData: false,
                contentType: false,
                resetForm: true,
                success: function (data) {
                    $("#thumbnil").attr("src", "../../Images/blank-headshot.jpg");
                    $("#FingerThumb").attr("src", "../../Images/blank-headshot.jpg");
                    window.location.href = "/Member/IndexCIB";
                },
                error: function () {
                    $("#dialog-message").html('<p>Error, Fail to Save.</p>');
                    $("#dialog-message").dialog({
                        modal: true,
                        buttons: {
                            Ok: function () {
                                $(this).dialog("close");
                            }
                        }
                    });
                }
            });
            //alert($("#MemberCode").val());

            //    },
            //    error: function (request, status, error) {
            //        $("#loading").hide();
            //        $("#dvMessage").attr('class', 'failed');
            //        $("#dvMessage").html(request.statusText);
            //        $("#dvMessage").show();
            //    }
            //});



            /////////////////


        });






    });


</script>



@Html.ActionLink("Back to List", "IndexCIB", null, new { @class = "pull-right" })

<h2 class="page-title">Edit CIB</h2>

@using (Html.BeginForm("EditCIB", "Member", FormMethod.Post, new { enctype = "multipart/form-data", id = "MemProfile" }))
{

    <input type="hidden" id="hdnCameraDefine" value="0" />


    @Html.AntiForgeryToken()
    <div id="dialog-message" title="Message" style="display:none;">
        <p>
            <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 50px 0;"></span>
            Your files have downloaded successfully into the My Downloads folder.
        </p>
    </div>
    <div class="">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.MemberCode, htmlAttributes: new { @class = "control-label" })

                    @*@Html.EditorFor(model => model.MemberCode, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.TextBox("MemberCodeReadonly", Model.MemberCode, new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.MemberCode, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.MemberID)
                    @Html.HiddenFor(model => model.OfficeID)
                </div>
            </div>


            <div class="col-md-6">
                &nbsp;
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @*@Html.LabelFor(model => model.MemberCode, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.MemberCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MemberCode, "", new { @class = "text-danger" })*@
                    @Html.LabelFor(model => model.CenterID, htmlAttributes: new { @class = "control-label", @readonly = "readonly" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.DropDownListFor(model => model.CenterID, cntr, new { @class = "form-control" })
                    @Html.HiddenFor(model => model.OfficeID)
                    @Html.HiddenFor(model => model.MemberCode)
                    @Html.HiddenFor(model => model.ServerCurrentDate)
                    @Html.ValidationMessageFor(model => model.CenterID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group" style="display:none;">
                    @Html.LabelFor(model => model.GroupID, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>

                    @Html.DropDownListFor(model => model.GroupID, grp, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GroupID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MemberCategoryID, htmlAttributes: new { @class = "control-label", @readonly = "readonly" })<span style="color:red; font-size:15px;"> * </span>

                    @Html.DropDownListFor(model => model.MemberCategoryID, mem_cat, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MemberCategoryID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <fieldset>
                <legend> নাম (Applicant’s Name) </legend>


                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> বাংলায় In Bangla </label> <span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.BanglaName, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.BanglaName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> ইংরেজিতে In English (Capital Letters) </label> <span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="col-md-4" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4" style="display:none">
                    <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>



            </fieldset>
        </div>

        <fieldset>
            <legend> পিতার নাম (Father’s Name) </legend>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> বাংলায় In Bangla  </label><span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.FatherNameBN, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.FatherNameBN, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> ইংরেজিতে In English (Capital Letters)  </label><span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </fieldset>


        <fieldset>
            <legend> মাতার নাম (Mother’s Name) </legend>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> বাংলায় In Bangla  </label><span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.MotherName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.MotherNameBN, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MotherNameBN, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> ইংরেজিতে In English (Capital Letters) </label><span style="color:red; font-size:15px;"> * </span>
                        @*@Html.LabelFor(model => model.MotherNameBN, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                    </div>
                </div>



            </div>

        </fieldset>

        <fieldset>
            <legend> স্বামী/ স্ত্রীর নাম (Spouse’s Name) </legend>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> বাংলায় In Bangla  </label>
                        @*@Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.SpouseNameBN, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.SpouseNameBN, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label"> ইংরেজিতে In English (Capital Letters)  </label>
                        @*@Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>*@
                        @Html.EditorFor(model => model.SpouseName, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.SpouseName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>বর্তমান ঠিকানা (Present Address)</legend>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CountryID, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.CountryID, country, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DivisionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.DivisionCode, div, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DivisionCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.DivisionCode, new { @id = "hfDivisionCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DistrictCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.DistrictCode, dist, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DistrictCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.DistrictCode, new { @id = "hfDistrictCode" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.UpozillaCode, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.UpozillaCode, upo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UpozillaCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.UpozillaCode, new { @id = "hfUpozillaCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.UnionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.UnionCode, uni, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UnionCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.UnionCode, new { @id = "hfUnionCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <lable class="control-label">Village / Street</lable>
                        @Html.DropDownListFor(model => model.VillageCode, vill, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.VillageCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.VillageCode, new { @id = "hfVillageCode" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control", @PlaceHolder = "Road No, House No, Moholla " } })
                        @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4" style="display:none;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </fieldset>


        <fieldset>
            <legend>স্থায়ী ঠিকানা (Permanent Address)</legend>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerCountryID, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.PerCountryID, country, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerCountryID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerDivisionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.PerDivisionCode, div, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerDivisionCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.PerDivisionCode, new { @id = "hfPerDivisionCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerDistrictCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.PerDistrictCode, dist, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerDistrictCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.PerDistrictCode, new { @id = "hfPerDistrictCode" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerUpozillaCode, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.DropDownListFor(model => model.PerUpozillaCode, upo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerUpozillaCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.PerUpozillaCode, new { @id = "hfPerUpozillaCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerUnionCode, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.PerUnionCode, uni, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerUnionCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.PerUnionCode, new { @id = "hfPerUnionCode" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <lable class="control-label">Village / Street</lable>
                        @Html.DropDownListFor(model => model.PerVillageCode, vill, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerVillageCode, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.PerVillageCode, new { @id = "hfPerVillageCode" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerZipCode, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.PerZipCode, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PerZipCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerAddressLine1, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                        @Html.EditorFor(model => model.PerAddressLine1, new { htmlAttributes = new { @class = "form-control", @PlaceHolder = "Road No, House No, Moholla " } })
                        @Html.ValidationMessageFor(model => model.PerAddressLine1, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4" style="display:none;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PerAddressLine2, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.PerAddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PerAddressLine2, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </fieldset>



        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    <label class="control-label col-sm-4">  পরিচয়পত্রের ধরন  (ID Type) </label>
                    <div class="col-sm-8">
                        @Html.DropDownList("comtype", null, new { @ID = "ddlIdentityType", @class = "form-control" })
                        @Html.HiddenFor(model => model.IdentTypeID)
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label class="control-label col-sm-4">  Issue Date </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.CardIssueDate, new { htmlAttributes = new { @class = "form-control", @AutoComplete = "off" } })
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label class="control-label col-sm-4">  পরিচয়পত্রের নম্বর (ID Number): </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.NationalID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NationalID, "", new { @class = "text-danger", @AutoComplete = false })
                    </div>
                </div>
            </div>
        </div>

        @*<div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.NationalID, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.EditorFor(model => model.NationalID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NationalID, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <br />
        <div class="row">
            <div class="col-md-4" id="dvIdCardIssue">
                <div class="form-group">
                    <label class="control-label col-sm-6">  পরিচয়পত্রের মেয়াদকাল </label>

                    @*@Html.LabelFor(model => model.JoinDate, htmlAttributes: new { @class = "control-label", @readonly = true })<span style="color:red; font-size:15px;"> * </span>*@
                    @Html.EditorFor(model => model.ExpireDate, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ExpireDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label col-sm-6">  পরিচয়পত্র প্রদানকারী দেশ </label>
                    @Html.DropDownListFor(model => model.ProvidedByCountryID, country, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProvidedByCountryID, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>

        <hr />




        <div class="row">

            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    <div style="margin:1%;" id="Result"> </div>
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control", @AutoComplete = "off" } })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Age:</label>
                    @Html.EditorFor(model => model.AsOnDateAge, new { htmlAttributes = new { @class = "form-control", @PlaceHolder = "As On Date Age " } })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.DropDownListFor(model => model.Gender, gen, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.JoinDate, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.EditorFor(model => model.JoinDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JoinDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-3" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.PlaceOfBirth, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.PlaceOfBirth, pob, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PlaceOfBirth, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cityzenship, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.Cityzenship, cityzen, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Cityzenship, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.HomeType, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.DropDownListFor(model => model.HomeType, home, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.HomeType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.GroupType, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.GroupType, groupTyp, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GroupType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Education, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.Education, edu, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Education, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.FamilyMember, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.FamilyMember, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.FamilyMember, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label" })<span style="color:red; font-size:15px;"> * </span>
                    @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">

            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label"> Family Contact No </label>
                    @Html.EditorFor(model => model.FamilyContactNo, new { htmlAttributes = new { @class = "form-control", @Autocomplete = "off" } })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Refree Name</label>
                    @Html.EditorFor(model => model.RefereeName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RefereeName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Co Applicant Name(Family Head)</label><span style="color:red; font-size:15px;"> * </span>
                    @Html.EditorFor(model => model.CoApplicantName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CoApplicantName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.EconomicActivity, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.EconomicActivity, eco, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EconomicActivity, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.TotalWealth, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.TotalWealth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TotalWealth, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.MaritalStatus, marry, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-3" style="display:none;">
                <div class="form-group">
                    @Html.LabelFor(model => model.MemCategory, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.MemCategory, memCat, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MemCategory, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="row">

            <div class="col-md-4">
                &nbsp;
            </div>
        </div>


        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    <label class="control-label col-sm-4">  টি আই এন </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.TIN, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TIN, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-sm-8">
                <div class="form-group">
                    <label class="control-label col-sm-4"> যদি ট্যাক্স দেন (ট্যাক্স পরিমাণ) </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.TaxAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TaxAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>


        <fieldset>
            <legend> </legend>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label class="control-label col-sm-6">  সদস্য কোন মোবাইল ফিনাসিয়াল সার্ভিস ব্যবহার করেন কিনা?  </label>
                        <div class="col-sm-6">
                            @Html.DropDownList("comtype", null, new { @ID = "ddlChoseFinService", @class = "form-control" })
                            @*@Html.HiddenFor(model => model.IsAnyFS, new { @id = "hfIsAnyFS" })*@
                            @Html.HiddenFor(model => model.IsAnyFS)
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="row" id="dvServiceDetails">
                <div class="col-sm-12">
                    <div class="form-group">
                        <label class="control-label col-sm-4">  যদি করে থাকেন কোনটা লিখুন  </label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.FServiceName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FServiceName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <hr />
                </div>
                <div class="col-sm-12">
                    <div class="form-group">
                        <label class="control-label col-sm-4">  কি কারণে ব্যবহার করেন?  </label>
                        <div class="col-sm-8">
                            @Html.DropDownList("comtype", null, new { @ID = "ddlFinServiceChoice", @class = "form-control" })
                            @*@Html.HiddenFor(model => model.FinServiceChoiceId, new { @id = "hfFinServiceChoiceId" })*@
                            @Html.HiddenFor(model => model.FinServiceChoiceId)
                        </div>
                    </div>
                </div>


            </div>
            <br />
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">  লেনদেনের মাধ্যম  </label>
                        <div class="col-sm-8">
                            @Html.DropDownList("comtype", null, new { @ID = "ddlTransactionChoice", @class = "form-control" })
                            @*@Html.HiddenFor(model => model.TransactionChoiceId, new { @id = "hfTransactionChoiceId" })*@
                            @Html.HiddenFor(model => model.TransactionChoiceId)

                        </div>
                    </div>
                </div>

            </div>


        </fieldset>

        <hr />
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-8">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MemberImg, htmlAttributes: new { @class = "control-label" })

                            @Html.TextBoxFor(model => model.ImgFile, new { type = "file", @onchange = "showMyImage(this);", @class = "form-control" })
                            @*<input type="file" accept="image/*" onchange="showMyImage(this)" id="imagedata"ImgFile />*@
                            @Html.ValidationMessageFor(model => model.MemberImg, "", new { @class = "text-danger" })
                            <br />
                            <input type="button" id="captureImage" data-type="image" value="Capture Image" class="btn btn-facebook" />

                        </div>
                    </div>
                    <div class="col-md-4">
                        <img id="thumbnil" src="~/Member/RetrieveImage/@Model.MemberID" alt="Member Image" class="img-responsive thumb-img" />
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-4">
                        <img id="FingerThumb" src="~/Member/RetrieveFingerImage/@Model.MemberID" alt="Member Thumb Image" class="img-responsive thumb-img" style="float: right;" />
                    </div>
                    <div class="col-md-8">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ThumbImg, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.ThumbImgFile, new { type = "file", @onchange = "showFingerThunbImage(this);", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ThumbImg, "", new { @class = "text-danger" })
                            <br />
                            <input type="button" id="captureImageFingerThumb" data-type="thumb" value="Capture Thumb" class="btn btn-facebook" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group form-action">
                    <input type="submit" value="Save" class="btn btn-primary" id="btnSave" />
                </div>
            </div>

        </div>

        <!-- Popup for Capture Image -->
        <div id="webcamDiv" title="Capture Image" style="display:none">

            <div id="container imgcontainer">
                <video id="video"></video>
                <canvas id="canvas"></canvas>
            </div>

        </div>
        <!-- End Of  -->

    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
}
