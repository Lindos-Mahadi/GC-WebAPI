@model gBanker.Web.ViewModels.PartialLoanDisbursementViewModel

@{
    ViewBag.Title = "Partial Disbursement";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var product = Model == null ? null : Model.productListItems;
    var membercategory = Model == null ? null : Model.membercategoryListItems;
    var office = Model == null ? null : Model.officeListItems;
    var center = Model == null ? null : Model.centerListItems;
    var purpose = Model == null ? null : Model.purposeListItems;
    var investor = Model == null ? null : Model.investorListItems;
    var member = ViewBag.MemberName as string;
    var pMode = Model == null ? null : Model.paymentMode;
    var officeName = office.Where(o => o.Value == Model.OfficeID.ToString()).FirstOrDefault().Text;
    var centerName = center.Where(o => o.Value == Model.CenterID.ToString()).FirstOrDefault().Text;
    var productName = product.Where(o => o.Value == Model.ProductID.ToString()).FirstOrDefault().Text;
    var investorName = investor.Where(o => o.Value == Model.InvestorID.ToString()).FirstOrDefault().Text;
    var mPassBook = Model == null ? null : Model.MemberPassBookNOListItems;
    var memberPass = ViewBag.MemberPassBook as string;
    var disType = Model == null ? null : Model.disType;
    var fDisment = Model == null ? null : Model.PDis;

    var AccCode = Model == null ? null : Model.AccListListItems;
}
<script src="~/Scripts/jquery.form.min.js"></script>

<script type="text/javascript">
    $body = $("body");
    function SetTRxid(value) {
        var ddlValue1 = $("#TransType option:selected").val();
        $("#hftrxType").val(ddlValue1);
    }
    function SetProductid(value) {

        var ddlValue = $("#ProductID option:selected").val();
        $("#hfProdId").val(ddlValue);

    }
    function SetPassid(value) {

        var ddlValue = $("#MemberPassBookRegisterID option:selected").val();
        $("#hfMemPassId").val(ddlValue);

    }
    function GetMemberPassBookList(Member_id) {
        var ddlproduct = $("#MemberPassBookRegisterID");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetMemberPassBookList", "LoanApproval", "http")',
            data: { Member_id: Member_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlproduct.html('');
                $.each(data, function (id, option) {
                    ddlproduct.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function CalcLoanTerm() {
        //alert('fn');
        var prodId = $("#hfProdId").val();
        var memId = $("#MemberID").val();
        var officeId = $("#OfficeID").val();
        var centerId = $("#CenterID").val();

        if (prodId > 0 && memId > 0 && officeId > 0 && centerId > 0) {

            $body.addClass("loading");
            $.ajax({
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("GetMaxLoanTermEdit", "LoanApprovalElegible", "http")',
                type: "GET",
                dataType: 'json',
                async: true,
                data: { officeId: officeId, centerId: centerId, MemId: memId, ProdId: prodId },

                success: function (result) {
                    $("#LoanTerm").val(result.LoanTerm);
                    $body.removeClass("loading");


                },
                error: function (err) {
                    $body.removeClass("loading");
                }
            });
        }
    }
    function SetProductid(value) {

        var ddlValue = $("#ProductID option:selected").val();
        $("#hfProdId").val(ddlValue);

    }
    $(document).ready(function () {
       
        $("#ProductID").change(function () {
            CalcLoanTerm();
        });
        $("#CenterID").change(function () {
            CalcLoanTerm();
        });
        $("#MemberID").change(function () {
            CalcLoanTerm();
        });
        $("#OfficeID").change(function () {
            CalcLoanTerm();
        });
        ////////////////////////////////////
        $("#TransType").change(function () {
            var trxType = $("#TransType option:selected").val();
            //var trxType = "102";
            if (trxType == '102') {
                $("#BankName").prop("disabled", false);
                $("#ChequeNo").prop("readonly", false);
                $("#ChequeIssueDate").prop("readonly", false);
            }
            else {
                $("#BankName").prop("disabled", true);
                $("#ChequeNo").prop("readonly", true);
                $("#ChequeIssueDate").prop("readonly", true);
            }
        });

        $("#FinalDisbursement").change(function () {
            var trxType = $("#FinalDisbursement").val();
            //var trxType = "102";
            if (trxType == '1') {
                $("#InstallmentStartDate").prop("disabled", false);

                var vprincipal = $("#PrincipalLoan").val() ;
                var prodId = $("#ProductID").val();
                var duration = $("#Duration").val();
                var PartialAmt = $("#PartialAmount").val();
                var principal = parseFloat(vprincipal) + parseFloat(PartialAmt);
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetInstallment", "PartialDisbursement", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { productid: prodId, principal: principal, duration: duration },

                    success: function (result) {


                        $("#LoanInstallment").val(result.loan);
                        $("#IntInstallment").val(result.interest);
                        $("#Duration").val(result.duration);


                    }
                });
               
            }
            else {

                $("#InstallmentStartDate").prop("disabled", true);
                $("#InstallmentStartDate").val('')
                $("#LoanInstallment").val(0);
                $("#IntInstallment").val(0);
            }
        });
       
        $("#PartialAmount").change(function () {
            var duration = $("#Duration").val();
            var prodId = $("#ProductID").val();
            var vPartialAmount = $("#PartialAmount").val();
            var vPrint = $("#PrincipalLoan").val();
            var vIntPaid = $("#PartialIntPaid").val();
            var vApproveAmount = $("#ApprovedAmount").val();
            var vTot = parseFloat(vPartialAmount) + parseFloat(0) + parseFloat(vIntPaid)
            var principal = parseFloat(vPartialAmount) + parseFloat(vPrint)
            if (parseFloat(principal) > parseFloat(vApproveAmount))
            {
                $("#PartialAmount").val(0);
            }

            if (parseFloat(principal) == parseFloat(vApproveAmount))
            {
                $("#DisbursementType").val(2);
                $("#DisbursementType").val("Yes");
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetInstallment", "PartialDisbursement", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { productid: prodId, principal: principal, duration: duration },

                    success: function (result) {


                        $("#LoanInstallment").val(result.loan);
                        $("#IntInstallment").val(result.interest);
                        $("#Duration").val(result.duration);


                    }
                });

            }
            else
            {
                $("#InstallmentStartDate").prop("disabled", true);
                $("#LoanInstallment").val(0);
                $("#IntInstallment").val(0);
            }
            //var trxType = "102";
            $("#TotalAmount").val(vTot);
        });
        ////////////////////////////////////
        $("#DisbursementType").change(function () {
            var disType = $("#DisbursementType").val();
            //var trxType = "102";
            if (disType == '2') {
                $("#ApprovedAmount").prop("readonly", false);

            }
            else {
                $("#ApprovedAmount").prop("readonly", true);

            }
        });

        $("#TransType").blur(function () {
            var vTrz = $("#TransType option:selected").val();

            if (vTrz='102') {
               
                $("#BankName").prop("disabled", false);
                $("#ChequeNo").prop("readonly", false);
                $("#ChequeIssueDate").prop("readonly", false);
                $("#BankName").enable(true);
            }
            else {
               
                $("#BankName").prop("disabled", true);
                $("#ChequeNo").prop("readonly", true);
                $("#ChequeIssueDate").prop("readonly", true);
            }

        });
        ////////////////////////////////////
        $("#PrincipalLoan").blur(function () {
            var principal = $("#PrincipalLoan").val();
            var prodId = $("#ProductID").val();
            var duration = $("#Duration").val();
            if (parseFloat(principal) > 50000) {
                $("#TransType").val("102");
                //$("#BankName").prop("readonly", false);
                //$("#ChequeNo").prop("readonly", false);
                //$("#ChequeIssueDate").prop("readonly", false);
            }
            else
            {
                $("#TransType").val("101");
                //$("#BankName").prop("readonly", true);
                //$("#ChequeNo").prop("readonly", true);
                //$("#ChequeIssueDate").prop("readonly", true);
            }

            $.ajax({
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("GetInstallment", "LoanApprovalElegible", "http")',
                type: "GET",
                dataType: 'json',
                async: true,
                data: { productid: $("#ProductID").val(), principal: principal, duration: duration },

                success: function (result) {


                    $("#LoanInstallment").val(result.loan);
                    $("#IntInstallment").val(result.interest);
                    $("#Duration").val(result.duration);

                }
            });
        });

        $("#memberAutoComplete").blur(function () {
            var member = $("#memberAutoComplete").val();
            ///function

            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "LoanApprovalElegible", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {
                        // alert(data.length);
                        if (data.length == 1) {
                            $("#memberAutoComplete").val(data[0].MemberName);
                            $("#MemberID").val(data[0].MemberID);
                            CalcLoanTerm();
                        }
                        else if (data.length == 0) {
                            alert("No member found.");
                            $("#MemberID").val("");

                        }
                        else {
                            alert("More than one member found with the given Member code.");
                            $("#MemberID").val("");
                        }
                    }
                });
            }
        });
        $("#memberAutoComplete").autocomplete({
            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "LoanApprovalElegible", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            },
            change: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            }
        });


        $("#btnSave").click(function (e) {
            e.preventDefault();
            //var allIds = new Array();
            var Prod = new Array();

            //var allTrx = new Object();
            //allTrx.ProdList = Prod;
            //var json = JSON.stringify(allTrx);
            //console.log(json);
            $('#EligibleProfile').ajaxSubmit({
                type: "POST",
                target: '#thumbnil',
                async: true,
                data: {},
                dataType: 'json',
                resetForm: true,
                success: function (data) {
                    //$("#dialog-message").html('<p><span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 50px 0;"></span>Member Approved Successfully.</p>');
                    //$("#dialog-message").dialog({
                    //    modal: true,
                    //    buttons: {
                    //        Ok: function () {
                    //            $(this).dialog("close");
                    //        }
                    //    }
                    //});

                    window.location.href = "/PartialDisbursement/Index";
                },
                error: function () {
                    alert('Error');
                }
            });
        });


        ///////////////
    });


</script>

<script type="text/javascript">
    $(document).ready(function () {
        //   $("#ApproveDate").datepicker();
        gBankerDatePicker("ApproveDate");
        gBankerDatePicker("ChequeIssueDate");
        $("#InstallmentStartDate").datepicker(
          {
              dateFormat: "dd-M-yy",
              showAnim: "scale"
          });
        $("#ChequeIssueDate").datepicker(
       {
           dateFormat: "dd-M-yy",
           //showStatus: true,
           //showWeeks: true,
           //highlightWeek: true,
           //numberOfMonths: 1,
           showAnim: "scale",
           //showOptions: {
           //    origin: ["top", "left"]
           //}
       });
    });




</script>

@Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right" })

<h2 class="page-title">Partial Disbursement</h2>

@using (Html.BeginForm("Edit", "PartialDisbursement", FormMethod.Post, new { enctype = "multipart/form-data", id = "EligibleProfile" }))
{
    @Html.AntiForgeryToken()

    <div class="">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group" style="display :none">
            @Html.LabelFor(model => model.LoanSummaryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LoanSummaryID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoanSummaryID, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.OfficeID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.OfficeID, office, new { @class = "form-control", @readonly = true })
                    @Html.ValidationMessageFor(model => model.OfficeID, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OfficeID, htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("txtOficeName", officeName, new { @class = "form-control", @readonly = true })
                    @Html.HiddenFor(model => model.OfficeID)
                    @*@Html.ValidationMessageFor(model => model.OfficeID, "", new { @class = "text-danger" })*@
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterID, htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("txtCenterName", centerName, new { @class = "form-control", @readonly = true })
                    @Html.HiddenFor(model => model.CenterID)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Member", htmlAttributes: new { @class = "control-label" })
                    @Html.TextBox("txtmemberName", member, new { @class = "form-control", @readonly = true })
                    @*@Html.TextBox("memberAutoComplete", member, new { @class = "form-control" })*@
                    @Html.HiddenFor(model => model.MemberID)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.ProductID, product, new { @class = "form-control", @disabled = "disabled", onchange = "SetProductid(this.value);" })
                    @Html.Hidden("hfProdId")
                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InvestorID, htmlAttributes: new { @class = "control-label" })


                    @Html.DropDownListFor(model => model.InvestorID, investor, new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.InvestorID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanTerm, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.LoanTerm, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanTerm, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurposeID, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.PurposeID, purpose, new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.PurposeID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CoApplicantName, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.CoApplicantName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CoApplicantName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Guarantor, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Guarantor, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Guarantor, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">

                <div class="form-group">
                    @Html.LabelFor(model => model.MemberPassBookRegisterID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.MemberPassBookRegisterID, mPassBook, new { @class = "form-control", @readonly = true })
                    @Html.Hidden("hfMemPassId")

                    @Html.ValidationMessageFor(model => model.MemberPassBookRegisterID, "", new { @class = "text-danger" })
                </div>


            </div>
        </div>



        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PrincipalLoan, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.PrincipalLoan, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.PrincipalLoan, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ApprovedAmount, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ApprovedAmount, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.ApprovedAmount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PartialAmount, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.PartialAmount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PartialAmount, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.IntCharge, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.IntCharge, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.IntCharge, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.IntPaid, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.IntPaid, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.IntPaid, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PartialIntCharge, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.PartialIntCharge, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.PartialIntCharge, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PartialIntPaid, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.PartialIntPaid, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.PartialIntPaid, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        
        <div class="row">


            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.FinalDisbursement, htmlAttributes: new { @class = "control-label" })


                    @Html.DropDownListFor(model => model.FinalDisbursement, fDisment, new { @class = "form-control" })
                    @*@Html.DropDownListFor(model => model.TransType, pMode, new { onchange = "SetProductid(this.value);" })*@
                    @Html.Hidden("hffDisment")
                    @Html.ValidationMessageFor(model => model.FinalDisbursement, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanInstallment, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.LoanInstallment, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanInstallment, "", new { @class = "text-danger" })
                </div>
            </div>
            </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.IntInstallment, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.IntInstallment, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.IntInstallment, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group" style="display:none">
                    @Html.LabelFor(model => model.ApproveDate, htmlAttributes: new { @class = "control-label" })
                    <a href="~/Views/Member/Create.cshtml">~/Views/Member/Create.cshtml</a>
                    @Html.EditorFor(model => model.ApproveDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ApproveDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.TransType, htmlAttributes: new { @class = "control-label" })


                    @Html.DropDownListFor(model => model.TransType, pMode, new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.TransType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
       
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InstallmentStartDate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.InstallmentStartDate, new { htmlAttributes = new { @class = "form-control"} })
                    @Html.ValidationMessageFor(model => model.InstallmentStartDate, "", new { @class = "text-danger" })
                </div>
            </div>
        
        </div>
        <div class="row">
                <div class="col-md-4">
                    <div class="form-group">

                        @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label" })


                        @Html.DropDownListFor(model => model.BankName, AccCode, new { @class = "form-control", @disabled = "disabled" })

                        @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                    
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ChequeNo, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.ChequeNo, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.ChequeNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ChequeIssueDate, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.ChequeIssueDate, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.ChequeIssueDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group">
            <div class="form-group form-action">
                <input type="submit" value="Disburse" class="btn btn-primary" id="btnSave" />
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/gbUtility")
}