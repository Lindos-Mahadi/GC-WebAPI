@model gBanker.Web.ViewModels.SpecialLoanCollectionViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    var product = Model == null ? null : Model.productListItems;
    var membercategory = Model == null ? null : Model.membercategoryListItems;
    var office = Model == null ? null : Model.officeListItems;
    var center = Model == null ? null : Model.centerListItems;
    var purpose = Model == null ? null : Model.purposeListItems;
    var member = Model == null ? null : Model.memberListItems;
    var cashItem = Model == null ? null : Model.cashListItems;
    var BankNameList = Model == null ? null : Model.GetAccountCodeList;
    // var vmaxLoanterm == null ? null : Model.vMaxLoanTerm.ToString();

}
<style type="text/css">
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba( 255, 255, 255, .8 ) url('http://i.stack.imgur.com/FhHRx.gif') 50% 50% no-repeat;
    }

    /* When the body has the loading class, we turn
    the scrollbar off with overflow:hidden */
    body.loading {
        overflow: hidden;
    }

        /* Anytime the body has the loading class, our
    modal element will be visible */
        body.loading .modal {
            display: block;
        }
</style>




<script type="text/javascript">
    $body = $("body");

    function SetProductid(value) {
        var ddlValue = $("#ProductID option:selected").val();
        $("#hfProdId").val(ddlValue);
    }
    function SetTrxTypeid(value) {
        var ddlValue = $("#TrxType option:selected").val();
        $("#hftranId").val(ddlValue);
    }
    function GetProductList(Member_id, center_id) {
        var ddlproduct = $("#ProductID");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetProductList", "SpecialLoanCollection", "http")',
            data: { Member_id: Member_id, center_id: center_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlproduct.html('');
                $.each(data, function (id, option) {
                    ddlproduct.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function getBalance() {
     
        var loanRepaid = $("#LoanPaid").val();
        var intPaid = $("#IntPaid").val();
        if (loanRepaid.length == 0) {
            $("#LoanPaid").val("0");
            loanRepaid = "0";
        }
        if (intPaid.length == 0) {
            $("#IntPaid").val("0");
            intPaid = "0";
        }
        $.ajax({
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetBalance", "SpecialLoanCollection")',
            type: "GET",
            dataType: 'json',
            async: true,
            data: { loanRepaid: loanRepaid, intPaid: intPaid },

            success: function (result) {
                $("#TotalPaid").val(result.balance);

            },
            error: function (error) {
                alert('error');
            }
        });
    }
    function getInstallment() {
        var LoanTerm = $("#LoanTerm").val();
        var prodId = $("#hfProdId").val();
        var memId = $("#MemberID").val();
        var officeId = $("#OfficeID").val();
        var centerId = $("#CenterID").val();
        var trxType = $("#TrxType").val();
        //  var transtype = $("#TrxType").val();
        $.ajax({
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetInstallment", "SpecialLoanCollection", "http")',
            type: "GET",
            dataType: 'json',
            async: true,
            data: { officeId: officeId, centerId: centerId, MemId: memId, productid: prodId, loanTerm: LoanTerm, trxType: trxType },
            success: function (result) {
                $("#TotalPaid").val(result.total);
                $("#LoanPaid").val(result.loan);
                $("#IntPaid").val(result.interest);
                $("#LoanDue").val(result.loan);
                $("#IntDue").val(result.interest);
                $("#hfInterestCalculationMethod").val(result.interestCalcMethod);
                $("#hfPaymentFrequency").val(result.PaymentFreq);
                $("#hfLoanDue").val(result.LoanDue);
                $("#hfIntDue").val(result.InterestDue);
                $("#hfPrincipalLoan").val(result.PrincipalLoan);
                $("#hfLoanRepaid").val(result.LoanRepaid);
                $("#DailyLoanTrxID").val(result.DailyLoanTrxID);
                $("#PrincipalLoan").val(result.PrincipalLoan);
                $("#LoanRepaid").val(result.LoanRepaid);
                $("#CumIntCharge").val(result.cumIntcharge);
                $("#DueRecovery").val(result.DueRecovery);
                $("#IntCharge").val(result.vIntCharge);
                $("#hfCumLoanDue").val(result.vCumLoanDue);
                $("#hfCumIntDue").val(result.vCumIntDue);
                $("#hfBuroLoanDue").val(result.loan);
                $("#hfBuroIntDue").val(result.interest);
                if (result.interestCalcMethod == 'A') {
                    $("#LoanPaid").prop("readonly", true);
                    $("#IntPaid").prop("readonly", true);
                }
                else {
                    $("#LoanPaid").prop("readonly", false);
                    $("#IntPaid").prop("readonly", false);
                }

            }
        });
    }
    function CalcLoanTerm() {
        //alert('fn');
        var prodId = $("#hfProdId").val();
        var memId = $("#MemberID").val();
        var officeId = $("#OfficeID").val();
        var centerId = $("#CenterID").val();

        if (prodId > 0 && memId > 0 && officeId > 0 && centerId > 0) {

            $body.addClass("loading");
            $.ajax({
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("GetMaxLoanTerm", "SpecialLoanCollection", "http")',
                type: "GET",
                dataType: 'json',
                async: true,
                data: { officeId: officeId, centerId: centerId, MemId: memId, ProdId: prodId },

                success: function (result) {
                    $("#LoanTerm").val(result.LoanTerm);
                    $body.removeClass("loading");
                    if (result.LoanTerm == 0) {
                        $('#TotalPaid').val('0');
                        $('#LoanPaid').val('0');
                        $('#IntPaid').val('0');
                    }
                   
                },
                error: function (err) {
                    $body.removeClass("loading");
                }
            });
        }
    }
   

    function SetBankid(value) {

        var ddlValue = $("#BankName option:selected").val();
        $("#hfBankName").val(ddlValue);

    }
    function GetAccountCodeList() {
        var ddlproduct = $("#BankName");
        $("#loading").show();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetAccountCodeList", "SpecialSavingCollection", "http")',
            //data: { Member_id: Member_id, center_id: center_id },
            dataType: 'json',
            async: true,
            success: function (data) {
                $("#loading").hide();
                ddlproduct.html('');
                $.each(data, function (id, option) {
                    ddlproduct.append($('<option></option>').val(option.Value).html(option.Text));
                });
            },
            error: function (request, status, error) {
                $("#loading").hide();
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function calculate() {
        var TotPaid = $("#TotalPaid").val();
        var LoanPaid = $("#LoanPaid").val();
        var IntPaid = $("#IntPaid").val();
        var calcMethod = $("#hfInterestCalculationMethod").val();
        var PaymentFrequency = $("#hfPaymentFrequency").val();
        var LoanDue = $("#hfLoanDue").val();
        var IntDue = $("#hfIntDue").val();
        var PrincipalLoan = $("#hfPrincipalLoan").val();
        var LoanRepaid = $("#hfLoanRepaid").val(); 
        var cumIntPaid = $("#DueRecovery").val();
        var vcumLoanDue = $("#hfCumLoanDue").val();
        var vcumIntDue = $("#hfCumIntDue").val();
        var cumIntCharge = Math.round($("#CumIntCharge").val());
        var vInterestBalance = Number(Math.round(cumIntCharge)) - Number(Math.round(cumIntPaid))
        var vLoanInstallment = LoanPaid;
        var vInterestInstallment = IntPaid;
        var vPrincipalLOan = PrincipalLoan;
        var vloanRepaid = LoanRepaid;

        var total = TotPaid;
        var vLoan = LoanDue;
        var vInt = IntDue;
        var vTotalInstall = Number(vLoan) + Number(vInt);

        var  vDuration =$("#hfDuration").val();
        var vDurationOverLoanDue = $("#hfDurationOverLoanDue").val();
        var vDurationOverIntDue=$("#hfDurationOverIntDue").val();
        var vInstallmentNo = $("#hfInstallmentNo").val();
        var vOrgID = $("#hfOrgID").val();
        var vDOC = $("#hfDOC").val();
       
        var vTotalInstallBuro = Number(vDurationOverLoanDue) + Number(vDurationOverIntDue);

        if (Number(vInstallmentNo) > Number(vDuration)) {
            vLoan = vDurationOverLoanDue;
            vInt = vDurationOverIntDue;
            vTotalInstall = Number(vLoan) + Number(vInt)
            if (total == 0) {
                vLoanInstallment = 0;
                vInterestInstallment = 0;
            }
            else {
                if (calcMethod == "D") {
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                        vLoanInstallment = parseFloat(total)
                    }
                    // if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < (parseFloat(vLoan) + parseFloat(vInt)))
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                        vLoanInstallment = (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0)
                    {
                        vLoanInstallment = 0
                    }
                    if (vDOC == 0) {
                       
                        if (parseFloat(vLoan) > 0 && parseFloat(vInt)>0) {

                            vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);

                        }
                        else {

                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                                if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                                    vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                                }
                                if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                                    vLoanInstallment = 0
                                }
                            }


                        }
                    
                        
                    }
                }


                   
                else if (calcMethod == "A" || calcMethod == "R" || calcMethod == "D" || calcMethod == "F" || calcMethod == "H" || calcMethod == "S") {


                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                        vLoanInstallment = parseFloat(total)
                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                        vLoanInstallment = (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0)
                    {
                        vLoanInstallment = 0
                    }
                    if (vDOC == 0) {
                        if (parseFloat(vLoan) > 0 && parseFloat(vInt) > 0) {

                            vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);

                        }
                        else
                        {
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                                vLoanInstallment = parseFloat(total)
                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                                vLoanInstallment = (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0) {
                                vLoanInstallment = 0
                            }
                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                                if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                                    vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                                }
                                if (parseFloat(total) <= parseFloat(vInt)) {
                                    vLoanInstallment = 0
                                }
                            }
                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                                }
                                if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                                    vLoanInstallment = 0
                                }
                            }
                            if (calcMethod == "A")
                            {
                                if (parseFloat(total) < parseFloat(vInterestBalance)) {
                                    vLoanInstallment = 0;
                                }
                            }
                            


                        }
                    }

                   

                }
                else if (calcMethod == "E") {
                    if (parseFloat(total) > parseFloat(vInt)) {
                        vLoanInstallment = (parseFloat(total) - parseFloat(vInt))
                    }
                    if (parseFloat(total) <= parseFloat(vInt)) {
                        vLoanInstallment = 0
                    }
                }
                else {
                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vLoanInstallment = 0
                        }
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vLoanInstallment = 0
                        }


                    }
                    else if (parseFloat(vLoan)> 0 && parseFloat(vInt) > 0) {
                       
                        vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);

                    }
                        /////////////////////for General Calculation///////////////////////////////////////
                    else {

                        vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);
                    }

                }
            }
            // loanPaidId = vLoanInstallment;

            if (total == 0) {

                vInterestInstallment = 0;
            }
            else {
                if (calcMethod == "D") {
                    //if (calcMethod == "A") {
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                        vInterestInstallment = 0
                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                        vInterestInstallment = parseFloat(total) - (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0)
                    {
                        vInterestInstallment = parseFloat(total)
                    }
                    if (vDOC == 0) {
                        if (parseFloat(vLoan) > 0 && parseFloat(vInt) > 0) {
                            vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }

                        else {
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                                vInterestInstallment = 0
                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                                vInterestInstallment = parseFloat(total) - (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0) {
                                vInterestInstallment = parseFloat(total)
                            }
                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                                if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                                    vInterestInstallment = (parseFloat(total) - parseFloat(vLoanInstallment))
                                }
                                
                            }
                            if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                                vInterestInstallment = parseFloat(total)
                            }
                        }
                    }

                    //if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                    //    if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                    //        vInterestInstallment = parseFloat(vInterestBalance)
                    //    }
                    //    if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                    //        vInterestInstallment = parseFloat(total)
                    //    }
                    //}
                }

                else if (calcMethod == "A" || calcMethod == "R" || calcMethod == "D" || calcMethod == "F" || calcMethod == "H" || calcMethod=="S") {

                    //if (calcMethod == "A") {
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                        vInterestInstallment = 0
                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                        vInterestInstallment = parseFloat(total) - (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                    }
                    if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0)
                    {
                        vInterestInstallment = parseFloat(total)
                    }
                    if (vDOC == 0) {
                        if (parseFloat(vLoan) > 0 && parseFloat(vInt) > 0) {
                            vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                        else
                        {
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) >= parseFloat(total)) {

                                vInterestInstallment = 0
                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) > 0 && (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) < parseFloat(total)) {
                                vInterestInstallment = parseFloat(total) - (parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid))

                            }
                            if ((parseFloat(vPrincipalLOan) - parseFloat(vloanRepaid)) == 0) {
                                vInterestInstallment = parseFloat(total)
                            }

                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                                if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                                    vInterestInstallment = parseFloat(vInterestBalance)
                                }
                                if (parseFloat(total) < parseFloat(vInterestBalance)) {
                                    vInterestInstallment = parseFloat(total)
                                }
                                if (parseFloat(total) <= parseFloat(vInt)) {
                                    vInterestInstallment = parseFloat(total)
                                }
                            }
                            if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    vInterestInstallment = parseFloat(vInterestBalance)
                                }
                                if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                                    vInterestInstallment = parseFloat(total)
                                }
                            }
                        }
                    }
                }
                else if (calcMethod == "E") {
                    if (parseFloat(total) > parseFloat(vInt)) {
                        vInterestInstallment = parseFloat(vInt)
                    }
                    if (parseFloat(total) <= parseFloat(vInt)) {
                        vInterestInstallment = parseFloat(total)
                    }
                }
                else {
                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                    else if (parseFloat(vLoan) > 0 && parseFloat(vInt) > 0) {
                        vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                    }
                        /////////////////////for General Calculation///////////////////////////////////////
                    else {
                        vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                    }
                    if (vDOC == 0) {
                        if (parseFloat(vTotalInstall) > 0) {
                            vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                    }

                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                }
            }
        }
        else {
            if (total == 0) {
                vLoanInstallment = 0;
                vInterestInstallment = 0;
            }
            else {
                if (calcMethod == "D") {
                    
                    if (parseFloat(vDurationOverLoanDue) == 0 && parseFloat(vDurationOverIntDue) > 0) {


                        if (parseFloat(total) > parseFloat(vInt)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInt))
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vLoanInstallment = 0
                        }
                    }
                    else if (parseFloat(vDurationOverLoanDue) == 0 && parseFloat(vDurationOverIntDue) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vLoanInstallment = 0
                        }

                    }
                        /////////////////////for General Calculation///////////////////////////////////////
                    else {
                        if (parseFloat(total) < parseFloat(vLoan)) {
                            //vLoanInstallment = 0;
                            vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                        else {
                            vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                    }
                }

                else if (calcMethod == "A" || calcMethod == "R" ||  calcMethod == "V" || calcMethod=="S"  ) {
                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (calcMethod == "S")
                        {
                            if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                vLoanInstallment =parseFloat(total)- parseFloat(vInterestBalance)
                            }
                            else
                            {
                                vLoanInstallment = 0;
                            }
                        }
                        else
                        {
                            if (calcMethod == "A") {
                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    vLoanInstallment = parseFloat(total) - parseFloat(vInterestBalance)
                                }
                                else {
                                    vLoanInstallment = 0;
                                }
                            }
                            else
                            {
                                if (parseFloat(total) > parseFloat(vInt)) {
                                    vLoanInstallment = (parseFloat(total) - parseFloat(vInt))
                                }
                                if (parseFloat(total) <= parseFloat(vInt)) {
                                    vLoanInstallment = 0
                                }
                            }

                           
                        }
                        
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            if (parseFloat(vInterestBalance) <= 0) {
                                vLoanInstallment = parseFloat(total)
                            }
                            else
                                vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vLoanInstallment = 0
                        }
                    }

                        /////////////////////for General Calculation///////////////////////////////////////
                    else {

                        if (calcMethod == "A" ||  calcMethod=="S") {
                            if (vInterestBalance > vInt) {
                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                                }
                                if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                                    vLoanInstallment = 0
                                }
                                // vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                            }

                            else {


                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    if (vInterestBalance <= 0) {
                                        vLoanInstallment = parseFloat(total) - vInterestBalance

                                    }
                                    else
                                        vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                                }
                                if (parseFloat(total) <= parseFloat(vInt)) {
                                    vLoanInstallment = 0
                                }
                            }
                        }
                        else if (calcMethod == "R" || calcMethod == "V") {
                            if (parseFloat(total) > (parseFloat(vLoan) + parseFloat(vInt)) && parseFloat(total) - (parseFloat(vLoan) + parseFloat(vInt)) > vInterestBalance - parseFloat(vInt)) {

                                if (vInterestBalance > 0) {
                                    vLoanInstallment = parseFloat(total) - vInterestBalance

                                }
                                else {
                                    vLoanInstallment = parseFloat(total)
                                }


                            }
                            else {
                                if (parseFloat(total) < (parseFloat(vLoan) + parseFloat(vInt))) {

                                    if (parseFloat(total) < parseFloat(vInt)) {
                                        vLoanInstallment = 0
                                    }
                                    else {
                                        vLoanInstallment = parseFloat(total) - parseFloat(vInt)
                                    }

                                }
                                else
                                    vLoanInstallment = parseFloat(vLoan)

                            }


                        }

                    }
                }
                else if (calcMethod == "H" ) {
                    if (vInterestBalance > vInt) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vLoanInstallment = 0
                        }
                        // vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                    }

                    else {
                        if (parseFloat(total) > parseFloat(vInt)) {
                            if (vInterestBalance <= 0) {
                                vLoanInstallment = parseFloat(total) - vInterestBalance

                            }
                            else
                                vLoanInstallment = (parseFloat(total) - parseFloat(vInt))
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vLoanInstallment = 0
                        }
                    }
                }
                else if (calcMethod == "E") {
                    if (parseFloat(total) > parseFloat(vInt)) {
                        vLoanInstallment = (parseFloat(total) - parseFloat(vInt))
                    }
                    if (parseFloat(total) <= parseFloat(vInt)) {
                        vLoanInstallment = 0
                    }
                }
                else {
                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vLoanInstallment = 0
                        }
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vLoanInstallment = (parseFloat(total) - parseFloat(vInterestBalance))
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vLoanInstallment = 0
                        }
                    }

                        /////////////////////for General Calculation///////////////////////////////////////
                    else {
                        vLoanInstallment = (parseFloat(vLoan) * parseFloat(total)) / parseFloat(vTotalInstall);
                    }
                }
            }
            // loanPaidId = vLoanInstallment;

            if (total == 0) {

                vInterestInstallment = 0;
            }
            else {
                if (calcMethod == "D") {

                    if (parseFloat(vDurationOverLoanDue) == 0 && parseFloat(vDurationOverIntDue) > 0) {

                        if (parseFloat(total) > parseFloat(vInt)) {
                            vInterestInstallment = parseFloat(vInt)
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                    else if (parseFloat(vDurationOverLoanDue) == 0 && parseFloat(vDurationOverIntDue) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                        //if (parseFloat(total) > parseFloat(vInt)) {
                        //    vInterestInstallment = parseFloat(vInt)
                        //}
                        //if (parseFloat(total) <= parseFloat(vInt)) {
                        //    vInterestInstallment = parseFloat(total)
                        //}
                    }
                        /////////////////////for General Calculation///////////////////////////////////////
                    else {
                        if (parseFloat(total) < parseFloat(vInt)) {
                            //vInterestInstallment = total;
                            vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                        else {
                            vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                        }
                    }
                }

                else if (calcMethod == "A" || calcMethod == "R" ||  calcMethod == "V" || calcMethod=="S") {

                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (calcMethod == "S")
                        {

                            

                            if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                vInterestInstallment = parseFloat(total) - parseFloat(vLoanInstallment)
                            }
                            else
                            {
                                vInterestInstallment = parseFloat(total)
                            }

                        }
                        else
                        {
                            if (calcMethod == "A") {
                                if (parseFloat(total) > parseFloat(vInterestBalance)) {
                                    vInterestInstallment = parseFloat(total) - parseFloat(vLoanInstallment);
                                }
                                else {
                                    vInterestInstallment = parseFloat(total);
                                }
                            }
                            else
                            {
                                if (parseFloat(total) > parseFloat(vInt)) {
                                    vInterestInstallment = parseFloat(vInt)
                                }
                                if (parseFloat(total) <= parseFloat(vInt)) {
                                    vInterestInstallment = parseFloat(total)
                                }
                            }

                           
                        }
                        
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            if (parseFloat(vInterestBalance) <= 0)
                            {
                                vInterestInstallment=0
                            }
                            else
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                   else  if (vInterestBalance >= vInt) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                        //vInterestInstallment = parseFloat(vInterestBalance)
                   }
                   else if (vInterestBalance < vInt) {
                       if (total <= vInterestBalance) {
                           vInterestInstallment = parseFloat(total)
                       }
                       else
                           vInterestInstallment = parseFloat(vInterestBalance)

                       //vInterestInstallment = parseFloat(vInterestBalance)
                   }
                   else {
                       if (parseFloat(total) > parseFloat(vInt)) {
                           if (vInterestBalance <= 0) {
                               vInterestInstallment = 0

                           }
                           else
                               vInterestInstallment = parseFloat(vInt)
                       }
                       if (parseFloat(total) <= parseFloat(vInt)) {
                           vInterestInstallment = parseFloat(total)
                       }
                   }
                        /////////////////////for General Calculation///////////////////////////////////////
                   

                }
                else if (calcMethod == "R" || calcMethod == "V") {
                    if (parseFloat(total) > (parseFloat(vLoan) + parseFloat(vInt)) && parseFloat(total) - (parseFloat(vLoan) + parseFloat(vInt)) > vInterestBalance - parseFloat(vInt)) {

                        if (vInterestBalance > 0) {
                            vInterestInstallment = vInterestBalance
                        }
                        else {
                            vInterestInstallment = 0
                        }


                    }
                    else {
                        if (parseFloat(total) < (parseFloat(vLoan) + parseFloat(vInt))) {
                            if (parseFloat(total) < parseFloat(vInt))
                            { vInterestInstallment = parseFloat(total) }
                            else
                            {
                                vInterestInstallment = parseFloat(vInt)
                            }

                        }
                        else {
                            vInterestInstallment = parseFloat(total) - parseFloat(vLoan)
                        }

                    }
                }
                else if (calcMethod == "A" || calcMethod == "H" || calcMethod=="S" ) {
                    if (vInterestBalance > vInt) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                        //vInterestInstallment = parseFloat(vInterestBalance)
                    }
                    else {
                        if (parseFloat(total) > parseFloat(vInt)) {
                            if (vInterestBalance <= 0) {
                                vInterestInstallment = 0

                            }
                            else
                                vInterestInstallment = parseFloat(vInt)
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                }
                else if (calcMethod == "E") {
                    if (parseFloat(total) > parseFloat(vInt)) {
                        vInterestInstallment = parseFloat(vInt)
                    }
                    if (parseFloat(total) <= parseFloat(vInt)) {
                        vInterestInstallment = parseFloat(total)
                    }
                }
                else {

                    if (parseFloat(vLoan) == 0 && parseFloat(vInt) > 0) {
                        if (parseFloat(total) >= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) < parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                        if (parseFloat(total) <= parseFloat(vInt)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                    else if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                        if (parseFloat(total) > parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(vInterestBalance)
                        }
                        if (parseFloat(total) <= parseFloat(vInterestBalance)) {
                            vInterestInstallment = parseFloat(total)
                        }
                    }
                        /////////////////////for General Calculation///////////////////////////////////////
                    else {
                        vInterestInstallment = (parseFloat(vInt) * parseFloat(total)) / parseFloat(vTotalInstall);
                    }
                }
            }
        }
     



        if (calcMethod != "A")
        {
            var vLoanBal = Number(vPrincipalLOan) - Number(vloanRepaid)
            var calIns = Number(vloanRepaid) + Number(vLoanInstallment)
            if (calIns >= Number(vPrincipalLOan)) {
                vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))
                vLoanInstallment = Number(vPrincipalLOan) - Number(vloanRepaid)
            }


            var vLoanBalance = Number(vPrincipalLOan) - Number(vloanRepaid);
            var vBal = Number(vLoanBalance) + Number(vInterestBalance);
            if (Number(Math.round(vBal)) <= Number(total)) {

                if (Number(vInterestBalance) > 0) {
                    if (calcMethod == "F") {
                        vInterestInstallment = Number(Math.round(vInterestBalance))
                    }
                    else
                        vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))

                    //vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))
                    vLoanInstallment = Number(vPrincipalLOan) - Number(vloanRepaid)

                }
                else
                    if (Number(Math.round(total)) > Number(Math.round(vLoanBalance))) {

                        if (calcMethod == "F") {
                            vInterestInstallment = Number(Math.round(vInterestBalance))
                        }
                        else
                            vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))

                        //vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))
                        vLoanInstallment = Number(vPrincipalLOan) - Number(vloanRepaid)
                    }
                    else {
                        vInterestInstallment = 0
                        // vInterestInstallment = Number(Math.round(total)) - (Number(vPrincipalLOan) - Number(vloanRepaid))
                        vLoanInstallment = Number(Math.round(total))
                    }


            }
            if (calcMethod != "S")
            {
                if ((Math.round(vLoanInstallment) + Math.round(vInterestInstallment)) > Number(total)) {
                    vLoanInstallment = Number(total) - Math.round(vInterestInstallment);

                }
            }
           

        }
       
        if (calcMethod == "A" || calcMethod == "H" || calcMethod=="S")
        {            
            var vLoanPayable = Number(total) - Math.round(vInterestInstallment)

            if (Number(vLoanPayable) > Number(vPrincipalLOan))
            {
                var NeatLoanPay = Number(total)  - Number(Math.round(vInterestBalance))
                $('#LoanPaid').val(Math.round(NeatLoanPay));
                var intPay = Number(total) - Number(NeatLoanPay)
                $('#IntPaid').val(Math.round(intPay));
            }
            else
            {
                if (vLoanPayable > 0)
                {
                    $('#LoanPaid').val(Math.round(vLoanPayable));
                    $('#IntPaid').val(Math.round(vInterestInstallment));
                }
                else
                {
                    $('#LoanPaid').val(Math.round(vLoanInstallment));
                    $('#IntPaid').val(Math.round(vInterestInstallment));
                }
               
            }
           
        }
        else
        {
            $('#LoanPaid').val(Math.round(vLoanInstallment));
            $('#IntPaid').val(Math.round(vInterestInstallment));
        }
        var vLoanBalance = Number(vPrincipalLOan) - Number(vloanRepaid);
        var vlIntBalance = Number(total) - Number(vLoanBalance);
        if (vLoanInstallment > vLoanBalance)
        {
            $('#LoanPaid').val(Math.round(vLoanBalance));
            $('#IntPaid').val(Math.round(vlIntBalance));
        }
        //if (calcMethod == "A") {
        //    var vLoanBalance = Number(vPrincipalLOan) - Number(vloanRepaid);
        //   // var vIntBal = Number(vcumInrerestCharge) - Number(vcumInrerestPaid);
        //   // var vBal = Number(vLoanBalance) + Number(vIntBal)
        //    if (Number(total) > (Number(Math.round(vInterestBalance)) + Number(vPrincipalLOan) - Number(vloanRepaid))) {

        //        $('#' + LoanPaid).val(Math.round(vLoanBalance));
        //        $('#' + IntPaid).val(Math.round(vInterestBalance));
        //        //$('#' + totalId).val(Math.round(vLoanBalance) + Math.round(vIntBal));
        //    }
        //}
        if (calcMethod == "F" || calcMethod == "A") {
            if (Number(total) > vLoanInstallment + vInterestInstallment) {
                $('#' + TotalPaid).val(0);
                $('#' + LoanPaid).val(Math.round(0));
                $('#' + IntPaid).val(Math.round(0));

            }
        }
      
      

        
        if (vOrgID == 39)
        {
            if(vDOC==0)
            {
                if (parseFloat(vLoan) == 0 && parseFloat(vInt) == 0) {
                    var vBuroLoanBal = Number(vPrincipalLOan) - Number(vloanRepaid)
                    var vBuroIntBal = Number(Math.round(cumIntCharge)) - Number(Math.round(cumIntPaid))
                    if (vBuroIntBal > 0) {
                        if (Number(total)-Number(vBuroIntBal) > 0) {
                            var rIntBal = (total - vBuroIntBal)
                            $('#IntPaid').val(Math.round(vBuroIntBal));

                            $('#LoanPaid').val(Math.round(rIntBal));
                        }

                        else
                        {
                            $('#IntPaid').val(Math.round(total));

                            $('#LoanPaid').val(Math.round(0));
                        }
                    }
                    else {
                        if (vBuroLoanBal > 0)
                        {
                            $('#IntPaid').val(Math.round(0));

                            $('#LoanPaid').val(Math.round(total));
                        }
                        else
                        {
                            $('#IntPaid').val(Math.round(total));

                            $('#LoanPaid').val(Math.round(0));
                        }
                        
                    }
                }
            }
        }

        ///For Buro//////////////Check Mulitiple Installment////////
        if (vOrgID == 54) {

            var vBuroLoanBal = Number(vPrincipalLOan) - Number(vloanRepaid)
            var vBuroIntBal = Number(Math.round(cumIntCharge)) - Number(Math.round(cumIntPaid))
            var vBuroActualBal = Number(vBuroLoanBal) + Number(vBuroIntBal)

            if (Number(vBuroActualBal) == Number(total)) {
                $('#LoanPaid').val(Math.round(vLoanInstallment));
                $('#IntPaid').val(Math.round(vInterestInstallment));
            }
            else {
                var vLoan = $("#hfBuroLoanDue").val();;
                var vInt = $("#hfBuroIntDue").val();;;
                if ((vInstallmentNo == "1" && vloanRepaid == "0") || (vInstallmentNo == "0" && vloanRepaid == "0")) {
                    if (Number(total) < Number(vLoan) + Number(vInt)) {
                        $('#LoanPaid').val(Math.round(0));
                        $('#IntPaid').val(Math.round(0));
                    }
                    else {
                        var vTotalInstallBuro = (parseFloat(vDurationOverLoanDue) + parseFloat(vDurationOverIntDue))
                        var exceptIstIns = Number(total) - (Number(vLoan) + Number(vInt))
                        if (Number(exceptIstIns) == 0) {
                            $('#LoanPaid').val(Math.round(vLoan));
                            $('#IntPaid').val(Math.round(vInt));
                         
                        }
                        else {
                            var instMod = (Number(exceptIstIns) % Number(vTotalInstallBuro));
                            if (instMod == "0") {
                                vLoanInstallment = (parseFloat(vDurationOverLoanDue) * parseFloat(exceptIstIns)) / parseFloat(vTotalInstallBuro);
                                vInterestInstallment = (parseFloat(vDurationOverIntDue) * parseFloat(exceptIstIns)) / parseFloat(vTotalInstallBuro);
                                $('#LoanPaid').val(Math.round(vLoanInstallment) + Math.round(vLoan));
                                $('#IntPaid').val(Math.round(vInterestInstallment) + Math.round(vInt));
                               
                            }
                            else {
                                $('#LoanPaid').val(Math.round(0));
                                $('#IntPaid').val(Math.round(0));
                            }
                        }
                        //var instMod = (Number(total) % Number(vTotalInstallBuro));
                    }
                }
                else {
                    if (Number(total) == Number(vLoan) + Number(vInt)) {
                        $('#LoanPaid').val(Math.round(vLoan));
                        $('#IntPaid').val(Math.round(vInt));
                        //$('#' + loanPaidId).val(Math.round(vLoan));
                        //$('#' + intPaidId).val(Math.round(vInt));

                    }

                    else {
                        var vCumLoanDueF = Number(vcumLoanDue) - Number(vloanRepaid);
                        var vCumIntDueF = Number(vcumIntDue) - Number(cumIntPaid);
                        var vTotalCumDue = Number(vCumLoanDueF) + Number(vCumIntDueF)
                        if (Number(vTotalCumDue) > 0 && vloanRepaid == "0") {
                            total = total - (Number(vCumLoanDueF) + Number(vCumIntDueF));
                        }
                        var vTotalInstallBuro = (parseFloat(vDurationOverLoanDue) + parseFloat(vDurationOverIntDue))
                        var instMod = (Number(total) % Number(vTotalInstallBuro));
                        if (instMod == "0") {
                            vLoanInstallment = (parseFloat(vDurationOverLoanDue) * parseFloat(total)) / parseFloat(vTotalInstallBuro);
                            vInterestInstallment = (parseFloat(vDurationOverIntDue) * parseFloat(total)) / parseFloat(vTotalInstallBuro);
                            var NoOfinst = (Number(total) / Number(vTotalInstallBuro));
                            var buroTotal = (parseFloat(NoOfinst) * parseFloat(vTotalInstallBuro));
                            if (Number(vTotalCumDue) > 0 && vloanRepaid == "0") {
                                $('#LoanPaid').val(Math.round(vLoanInstallment) + Math.round(vCumLoanDueF));
                                $('#IntPaid').val(Math.round(vInterestInstallment) + Math.round(vCumIntDueF));
                               
                            }
                            else {
                                $('#LoanPaid').val(Math.round(vLoanInstallment) );
                                $('#IntPaid').val(Math.round(vInterestInstallment) );
                              
                            }
                        }
                        else {
                            $('#LoanPaid').val(Math.round(0));
                            $('#IntPaid').val(Math.round(0));
                            //$('#' + loanPaidId).val(Math.round(0));
                            //$('#' + intPaidId).val(Math.round(0));
                            //$('#' + totalId).val(Math.round(0));
                        }
                    }
                }

            }
        }

       
    }
  
    $(document).ready(function () {
        $("body").delegate('#TotalPaid', 'focusout', function () {
            if ($(this).val() < 0) {
                $(this).val('0');
            }
        });
        $("#BankName").prop("disabled", true);
        $("#ChequeNo").prop("disabled", true);

        $("#LoanTerm").attr('min', 1);
        $("#LoanTerm").attr('max', 10000);
        $("#ProductID").change(function () {
          
            CalcLoanTerm();

        });
        $("#CenterID").change(function () {
            $("#memberAutoComplete").val('');
            $("#MemberID").val('');
            CalcLoanTerm();
        });
        $("#MemberID").change(function () {
            CalcLoanTerm();
        });
        $("#OfficeID").change(function () {
            CalcLoanTerm();
        });
        $("#IntPaid").keyup(function () {
            getBalance();
        });
        $("#LoanPaid").keyup(function () {
            getBalance();
        });
        $("#TrxType").change(function () {
            var trType = $("#TrxType option:selected").val();
            if (parseFloat(trType) == "22") {

                $("#BankName").prop("disabled", false);
                $("#ChequeNo").prop("disabled", false);

            }
            else {
                $("#BankName").prop("disabled", true);
                $("#ChequeNo").prop("disabled", true);
            }

        });
        ////////////////////////////////////
        $("#LoanTerm").blur(function () {
            var LoanTerm = $("#LoanTerm").val();
            var prodId = $("#hfProdId").val();
            var memId = $("#MemberID").val();
            var officeId = $("#OfficeID").val();
            var centerId = $("#CenterID").val();
            var trxType = $("#TrxType").val();
            if (trxType == 0) {
                alert('Pls Select the transaction type');
                $("#trxType").focus();
            }
            else {
                //  var transtype = $("#TrxType").val();
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetInstallment", "SpecialLoanCollection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { officeId: officeId, centerId: centerId, MemId: memId, productid: prodId, loanTerm: LoanTerm, trxType: trxType },
                    success: function (result) {
                        $("#TotalPaid").val(result.total);
                        $("#LoanPaid").val(result.loan);
                        $("#IntPaid").val(result.interest);
                        $("#LoanDue").val(result.loan);
                        $("#IntDue").val(result.interest);
                        $("#hfInterestCalculationMethod").val(result.interestCalcMethod);
                        $("#hfPaymentFrequency").val(result.PaymentFreq);
                        $("#hfLoanDue").val(result.LoanDue);
                        $("#hfIntDue").val(result.InterestDue);
                        $("#hfPrincipalLoan").val(result.PrincipalLoan);
                        $("#hfLoanRepaid").val(result.LoanRepaid);
                        $("#DailyLoanTrxID").val(result.DailyLoanTrxID);
                        $("#PrincipalLoan").val(result.PrincipalLoan);
                        $("#LoanRepaid").val(result.LoanRepaid);
                        $("#CumIntCharge").val(result.cumIntcharge);
                        $("#DueRecovery").val(result.DueRecovery);
                        $("#hfDuration").val(result.duration);
                        $("#hfDurationOverLoanDue").val(result.durationOverLoanDue);
                        $("#hfDurationOverIntDue").val(result.duartionOverIntDue);
                        $("#hfInstallmentNo").val(result.NoOfInstallment);
                        $("#InstallmentNo").val(result.NoOfInstallment);
                        $("#hfOrgID").val(result.orgID);
                        $("#hfDOC").val(result.DOC);
                        $("#IntCharge").val(result.vIntCharge);
                        $("#hfCumLoanDue").val(result.vCumLoanDue);
                        $("#hfCumIntDue").val(result.vCumIntDue);
                        $("#hfBuroLoanDue").val(result.loan);
                        $("#hfBuroIntDue").val(result.interest);
                        $("#LoanBal").val(Math.round(result.PrincipalLoan) - Math.round(result.LoanRepaid));
                        $("#SerBal").val(Math.round(result.cumIntcharge) - Math.round(result.DueRecovery));
                        //alert(val(result.NoOfInstallment));
                        $("#Fine").val(result.Fine);
                        if (result.interestCalcMethod == 'A' || result.interestCalcMethod == 'E' || result.interestCalcMethod == 'D' || result.interestCalcMethod == 'F' || result.interestCalcMethod == 'R' || result.interestCalcMethod == 'V') {
                            $("#LoanPaid").prop("readonly", true);
                            $("#IntPaid").prop("readonly", true);
                        }
                        else {
                            $("#LoanPaid").prop("readonly", false);
                            $("#IntPaid").prop("readonly", false);
                        }

                    }
                });
            }
        });


        $("#TotalPaid").blur(function () {            
            var TotPaid = $("#TotalPaid").val();
            var TotPrincipal = $("#hfPrincipalLoan").val();
            var TotLoanRepaid = $("#hfLoanRepaid").val();
            var vTrxType = $("#hftranId").val();

            var vCumIntCharge = $("#CumIntCharge").val();
            var vDueRecovery = $("#DueRecovery").val();
            var vcumLoanDue = $("#hfCumLoanDue").val();
            var vcumIntDue = $("#hfCumIntDue").val();
            var vOrgID = $("#hfOrgID").val();
            var vChargeBalnce = parseFloat(vCumIntCharge) - parseFloat(vDueRecovery)
            var bal = parseFloat(TotPrincipal) + parseFloat(vCumIntCharge) - (parseFloat(TotLoanRepaid) + parseFloat(vDueRecovery))
            var lBal = parseFloat(TotPrincipal) - parseFloat(TotLoanRepaid)
            var rBal = parseFloat(TotPaid) - parseFloat(lBal)
            var tPaid = parseFloat(lBal) + parseFloat(rBal)
            if (TotPaid != '') {
                if (parseFloat(TotPaid)>parseFloat(bal))
                {
                    $('#LoanPaid').val(parseFloat(lBal));
                    $('#IntPaid').val(parseFloat(rBal));
                    $('#TotalPaid').val(parseFloat(tPaid));
                    if (vTrxType == "31") {
                        if (parseFloat(Math.round(vChargeBalnce)) >= parseFloat(Math.round(TotPaid))) {
                            $('#LoanPaid').val(parseFloat(0));
                            $('#IntPaid').val(parseFloat(Math.round(TotPaid)));
                            $('#TotalPaid').val(parseFloat(Math.round(TotPaid)));
                        }
                        else {
                            $('#LoanPaid').val(parseFloat(0));
                            $('#IntPaid').val(parseFloat(Math.round(vChargeBalnce)));
                            $('#TotalPaid').val(parseFloat(Math.round(vChargeBalnce)));
                        }
                        //$('#LoanPaid').val(parseFloat(0));
                        //$('#IntPaid').val(parseFloat(TotPaid));
                    }
                    var calcMethod = $("#hfInterestCalculationMethod").val();
                    if (calcMethod=="F"  || calcMethod=="A" )
                    {
                        $('#LoanPaid').val(parseFloat(lBal));
                        $('#IntPaid').val(Math.round(parseFloat(vCumIntCharge)) - Math.round(parseFloat(vDueRecovery)));
                        $('#TotalPaid').val(Math.round(parseFloat(lBal) + parseFloat(vCumIntCharge) - parseFloat(vDueRecovery)));
                   
                    }
                    if (vOrgID == 3 || vOrgID == 29)
                    {
                        $('#LoanPaid').val(parseFloat(lBal));
                        $('#IntPaid').val(Math.round(parseFloat(vCumIntCharge)) - Math.round(parseFloat(vDueRecovery)));
                        $('#TotalPaid').val(Math.round(parseFloat(lBal) + parseFloat(vCumIntCharge) - parseFloat(vDueRecovery)));
                    }
                    if (vOrgID == 113 || vOrgID == 82) {
                        if (Number(Math.round(TotPaid)) > (Number(Math.round(lBal)) + Number(Math.round(vChargeBalnce)))) {
                            $('#' + intPaidId).val(Math.round(vChargeBalnce));


                            $('#' + loanPaidId).val(Math.round(lBal));
                            $('#' + totalId).val(Math.round(lBal) + Math.round(vChargeBalnce));

                        }
                    }
                    //calculate();
                }
                else
                {
                    calculate();
                    if (vTrxType == "31") {
                        if (parseFloat(Math.round(vChargeBalnce)) >= parseFloat(Math.round(TotPaid))) {
                            $('#LoanPaid').val(parseFloat(0));
                            $('#IntPaid').val(parseFloat(Math.round(TotPaid)));
                            $('#TotalPaid').val(parseFloat(Math.round(TotPaid)));
                        }
                        else {
                            $('#LoanPaid').val(parseFloat(0));
                            $('#IntPaid').val(parseFloat(Math.round(vChargeBalnce)));
                            $('#TotalPaid').val(parseFloat(Math.round(vChargeBalnce)));
                        }

                    }

                   
                    if (vOrgID == 113 || vOrgID == 82 ) {
                        if (Number(Math.round(TotPaid)) > (Number(Math.round(lBal)) + Number(Math.round(vChargeBalnce)))) {
                            $('#' + intPaidId).val(Math.round(vChargeBalnce));
                            $('#' + loanPaidId).val(Math.round(lBal));
                            $('#' + totalId).val(Math.round(lBal) + Math.round(vChargeBalnce));

                        }

                        else
                        {
                            if (Number(Math.round(TotPaid)) >= Number(Math.round(vChargeBalnce))) {
                                $('#IntPaid').val(parseFloat(Math.round(vChargeBalnce)));
                                var vloanval = Number(Math.round(TotPaid)) - Math.round(vChargeBalnce);
                                $('#LoanPaid').val(parseFloat(vloanval));
                                var vTotaLVal = Number(Math.round(vloanval)) + Math.round(vChargeBalnce);
                                $('#TotalPaid').val(parseFloat(Math.round(vTotaLVal)));
                            }
                        }
                    }
                    //if (parseFloat(Math.round(vChargeBalnce)) >= parseFloat(0)) {
                    //    $('#LoanPaid').val(parseFloat(Math.round(TotPaid)));
                    //    $('#IntPaid').val(parseFloat(0));
                    //    $('#TotalPaid').val(parseFloat(Math.round(TotPaid)));
                    //}

                }
                
            }
            else
            {

                $('#LoanPaid').val('0');
                $('#IntPaid').val('0');
            }
        });

        $("#memberAutoComplete").blur(function () {
            var member = $("#memberAutoComplete").val();
            ///function

            if (member.length > 0) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "SpecialLoanCollection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: member, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {
                        
                        if (data.length == 1) {
                            $("#memberAutoComplete").val(data[0].MemberName);
                            $("#MemberID").val(data[0].MemberID);
                           
                           // alert(data[0].MemberID);
                            if ($("#CenterID").val() > 0 && data[0].MemberID > 0) {
                               
                                GetProductList(data[0].MemberID, $("#CenterID").val());
                                $('#PrincipalLoan').val(parseFloat(0));
                            }
                            CalcLoanTerm();
                        }
                        else if (data.length == 0) {
                            // alert("No member found.");
                            $("#MemberID").val("");
                            $('#PrincipalLoan').val(parseFloat(0));

                        }
                        else {
                            // alert("More than one member found with the given Member code.");
                            $("#MemberID").val("");
                            $('#PrincipalLoan').val(parseFloat(0));
                        }
                    }
                });
            }
        });
        $("#memberAutoComplete").autocomplete({
            source: function (request, response) {
                $.ajax({
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetMemberList", "SpecialLoanCollection", "http")',
                    type: "GET",
                    dataType: 'json',
                    async: true,
                    data: { memberid: request.term, centerId: $("#CenterID").val() },
                    minLength: 1,
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                value: item.MemberID,
                                label: item.MemberName
                            };
                            //response(data);
                        }))
                    }
                })
            },
            messages: {
                noResults: "", results: ""
            },
            focus: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            },
            change: function (event, ui) {
                $("#memberAutoComplete").val(ui.item.label);
                $("#MemberID").val(ui.item.value);
                return false;
            }
        });
    });


</script>
<script type="text/javascript">
    $(document).ready(function () {
        // $("#TrxDate").datepicker();
        gBankerDatePicker("TrxDate");
       
    });


</script>


@Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right" })

<h2 class="page-title">Add SpecialLoanCollection</h2>

@using (Html.BeginForm("Create", "SpecialLoanCollection", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="">

     
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OfficeID, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.OfficeID, office, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OfficeID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.CenterID, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.CenterID, center, new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.CenterID, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.Label("Member", htmlAttributes: new { @class = "control-label" })

                    @Html.TextBox("memberAutoComplete", "", new { @class = "form-control" })
                    @Html.HiddenFor(model => model.MemberID)
                    @Html.TextBoxFor(model => model.MemberID, new { @style = "display:none" })
                    @Html.ValidationMessageFor(model => model.MemberID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label" })
                    @Html.DropDownListFor(model => model.ProductID, product, new { @class = "form-control", onchange = "SetProductid(this.value);" })
                    @Html.Hidden("hfProdId")
                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">

            <div class="col-md-6">
                <div class="form-group">

                    @Html.LabelFor(model => model.LoanTerm, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.LoanTerm, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LoanTerm, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-md-6">
                <div class="form-group">

                    @Html.LabelFor(model => model.TrxType, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.TrxType, cashItem, new { @class = "form-control", onchange = "SetTrxTypeid(this.value);" })
                    @Html.Hidden("hftranId")
                    @Html.ValidationMessageFor(model => model.TrxType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.TotalPaid,  htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.TotalPaid, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TotalPaid, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanPaid, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.LoanPaid, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanPaid, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.IntPaid, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.IntPaid, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.IntPaid, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">



                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label" })
                        @*@Html.DropDownListFor(model => model.BankName, product, new { @class = "form-control" })*@
                        @Html.DropDownListFor(model => model.BankName, BankNameList, new { @class = "form-control", onchange = "SetBankid(this.value);" })
                        @Html.Hidden("hfBankName")
                        @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ChequeNo, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.ChequeNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChequeNo, "", new { @class = "text-danger" })
                    </div>
                </div>



            </div>

            <div class="col-md-4" style="display:none">
                <div class="form-group" style="display:none">
                    @Html.LabelFor(model => model.LoanDue, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.LoanDue, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanDue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4" style="display:none">
                <div class="form-group" style="display:none">
                    @Html.LabelFor(model => model.IntDue, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.IntDue, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.IntDue, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PrincipalLoan, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.PrincipalLoan, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.PrincipalLoan, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanRepaid, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.LoanRepaid, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanRepaid, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CumIntCharge, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.CumIntCharge, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.CumIntCharge, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DueRecovery, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DueRecovery, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.DueRecovery, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanBal, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.LoanBal, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.LoanBal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SerBal, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.SerBal, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.SerBal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-4" style="display:none">
                <div class="form-group" style="display:none">
                    @Html.LabelFor(model => model.IntCharge, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.IntCharge, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.IntCharge, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Fine, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Fine, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.Fine, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InstallmentNo, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.InstallmentNo, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.InstallmentNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
            <div class="form-group">
                <div class="form-group form-action">
                    <input type="submit" value="Create" class="btn btn-primary" />
                    <input type="hidden" id="hfInterestCalculationMethod" />
                    <input type="hidden" id="hfPaymentFrequency" />
                    <input type="hidden" id="hfLoanDue" />
                    <input type="hidden" id="hfIntDue" />
                    <input type="hidden" id="hfPrincipalLoan" />
                    <input type="hidden" id="hfLoanRepaid" />
                    <input type="hidden" id="hfDuration" />
                    <input type="hidden" id="hfDurationOverLoanDue" />
                    <input type="hidden" id="hfDurationOverIntDue" />
                    <input type="hidden" id="hfInstallmentNo" />
                    <input type="hidden" id="hfOrgID" />
                    <input type="hidden" id="hfDOC" />
                    <input type="hidden" id="hfCumLoanDue" />
                    <input type="hidden" id="hfCumIntDue" />
                    <input type="hidden" id="hfBuroLoanDue" />
                    <input type="hidden" id="hfBuroIntDue" />
                    @Html.HiddenFor(model => model.DailyLoanTrxID)
                </div>
            </div>
        </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/gbUtility")

}
