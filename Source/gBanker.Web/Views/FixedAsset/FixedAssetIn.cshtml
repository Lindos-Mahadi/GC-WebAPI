@model gBanker.Web.ViewModels.FixedAssetViewModel

@{
    ViewBag.Title = "Asset Daily Entry";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}

<script>
    function GetHO(ddlVal) {
        var ddlHO = $("#ddlHO");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetHOList", "AccLedgerReport", "http")',
            data: {},
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlHO.html('');
                $.each(data, function (id, option) {
                    ddlHO.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (ddlVal != null) {
                    $('#ddlHO').val(ddlVal);
                    LoadOfficeWiseAssetUser(ddlVal);
                }

            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }
    function GetZone(HO_val, ddlVal) {
        var ddlZone = $("#ddlZone");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetZoneList", "AccBalanceSheet", "http")',
            data: { HO_val: HO_val },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlZone.html('');
                $.each(data, function (id, option) {
                    ddlZone.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (ddlVal != null) {
                    $('#ddlZone').val(ddlVal);
                    LoadOfficeWiseAssetUser(ddlVal);
                }
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function GetArea(HO_val, zone_val, ddlVal) {
        var ddlArea = $("#ddlArea");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetAreaList", "AccBalanceSheet", "http")',
            data: { HO_val: HO_val, zone_val: zone_val },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlArea.html('');
                $.each(data, function (id, option) {
                    ddlArea.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (ddlVal != null) {
                    $('#ddlArea').val(ddlVal);
                    LoadOfficeWiseAssetUser(ddlVal);
                }
                else {
                    $("#ddlArea").prop('selectedIndex', 0);
                }
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function GetOffice(HO_val, zone_val, area_val, ddlVal) {
        var ddlOffice = $("#ddlOffice");
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetOfficeList", "AccBalanceSheet", "http")',
            data: { HO_val: HO_val, zone_val: zone_val, area_val: area_val },
            dataType: 'json',
            async: true,
            success: function (data) {
                ddlOffice.html('');
                $.each(data, function (id, option) {
                    ddlOffice.append($('<option></option>').val(option.Value).html(option.Text));
                });
                if (ddlVal != null) {
                    $('#ddlOffice').val(ddlVal);
                    LoadOfficeWiseAssetUser(ddlVal);
                }
            },
            error: function (request, status, error) {
                alert(request.statusText + "/" + request.statusText + "/" + error);
            }
        });
    }

    function CheckOffcLevel() {
        var offcLevel = $('#lblOffcLevel').html();
        var firstLevel = $('#lblFirstLevel').html();
        var secondLevel = $('#lblSecondLevel').html();
        var thirdLevel = $('#lblThirdLevel').html();
        var fourthLevel = $('#lblFourthLevel').html();
        //alert(offcLevel);
        if (offcLevel == 1) {
            GetHO(firstLevel);
            GetZone(firstLevel, secondLevel);
            GetArea(firstLevel, secondLevel, thirdLevel);
            GetOffice(firstLevel, secondLevel, thirdLevel, fourthLevel);
            $("#ddlHO").prop("disabled", true);
        }
        if (offcLevel == 2) {
            GetHO(firstLevel);
            GetZone(firstLevel, secondLevel);
            // GetArea(firstLevel, secondLevel, thirdLevel);
            GetArea(firstLevel, secondLevel, null);
            GetOffice(firstLevel, secondLevel, thirdLevel, fourthLevel);
            $("#ddlHO").prop("disabled", true);
            $("#ddlZone").prop("disabled", true);
        }
        if (offcLevel == 3) {
            GetHO(firstLevel);
            GetZone(firstLevel, secondLevel);
            GetArea(firstLevel, secondLevel, thirdLevel);
            GetOffice(firstLevel, secondLevel, thirdLevel, fourthLevel);
            $("#ddlHO").prop("disabled", true);
            $("#ddlZone").prop("disabled", true);
            $("#ddlArea").prop("disabled", true);
        }
        if (offcLevel == 4) {
            GetHO(firstLevel);
            GetZone(firstLevel, secondLevel);
            GetArea(firstLevel, secondLevel, thirdLevel);
            GetOffice(firstLevel, secondLevel, thirdLevel, fourthLevel);
            $("#ddlHO").prop("disabled", true);
            $("#ddlZone").prop("disabled", true);
            $("#ddlArea").prop("disabled", true);
            $("#ddlOffice").prop("disabled", true);
        }

    }


    $(document).ready(function () {
        CheckOffcLevel();
        $("#ddlHO").change(function () {
            var HO_val = $("#ddlHO").val();
            if (HO_val > 0) {
                var ddlZone = $("#ddlZone");
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetZoneList", "AccTrialBalance", "http")',
                    data: { HO_val: HO_val },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        ddlZone.html('');
                        $.each(data, function (id, option) {
                            ddlZone.append($('<option></option>').val(option.Value).html(option.Text));
                        });
                        //ClearForm();
                    },
                    error: function (request, status, error) {
                        alert(request.statusText + "/" + request.statusText + "/" + error);
                    }
                });
            }
            else {
                $("#ddlZone").empty();
                $("#ddlArea").empty();
                $("#ddlOffice").empty();
            }
        });
        $("#ddlZone").change(function () {
            var HO_val = $("#ddlHO").val();
            var zone_val = $("#ddlZone").val();
            if (HO_val > 0 && zone_val > 0) {
                var ddlArea = $("#ddlArea");
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetAreaList", "AccTrialBalance", "http")',
                    data: { HO_val: HO_val, zone_val: zone_val },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        ddlArea.html('');
                        $.each(data, function (id, option) {
                            ddlArea.append($('<option></option>').val(option.Value).html(option.Text));
                        });
                        $("#ddlOffice").empty();
                    },
                    error: function (request, status, error) {
                        alert(request.statusText + "/" + request.statusText + "/" + error);
                    }
                });
            }
            else {
                $("#ddlArea").empty();
                $("#ddlOffice").empty();
            }
        });
        $("#ddlArea").change(function () {
            var HO_val = $("#ddlHO").val();
            var zone_val = $("#ddlZone").val();
            var area_val = $("#ddlArea").val();
            if (HO_val > 0 && zone_val > 0) {
                var ddlOffice = $("#ddlOffice");
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetOfficeList", "AccTrialBalance", "http")',
                    data: { HO_val: HO_val, zone_val: zone_val, area_val: area_val },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        ddlOffice.html('');
                        $.each(data, function (id, option) {
                            ddlOffice.append($('<option></option>').val(option.Value).html(option.Text));
                        });
                        //ClearForm();
                    },
                    error: function (request, status, error) {
                        alert(request.statusText + "/" + request.statusText + "/" + error);
                    }
                });
            }
            else {
                $("#ddlOffice").empty();
            }
        });

        $("#trxDate").change(function () {
            var trxDate = $("#trxDate").val();            
            var entryDate = new Date(trxDate);
            var systemDate = new Date();
            var office_id = GetWorkingOffice();
            $.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("CheckEntryDateValidation", "FixedAsset", "http")',
                data: { office_id: office_id },
                dataType: 'json',
                async: false,
                success: function (data) {
                    if(! (entryDate > new Date(data) && entryDate <= systemDate) ){                        
                        alert("Entry Date must be between Year Closing Date and System Date");
                        $("#trxDate").val("");
                    }
                }
            });
        });
        $("#PurchaseDate").change(function () {
            var trxDate = $("#trxDate").val();
            var entryDate = new Date(trxDate);

            var prDate = $("#PurchaseDate").val();
            var PurchaseDate = new Date(prDate);

            var systemDate = new Date();
            var office_id = GetWorkingOffice();
            $.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("CheckEntryDateValidation", "FixedAsset", "http")',
                data: { office_id: office_id },
                dataType: 'json',
                async: false,
                success: function (data) {
                    if (PurchaseDate > new Date(data) && PurchaseDate <= entryDate) {
                        $("#PurchaseDate").val(prDate);
                        $("#DepCalcDate").val(prDate);
                        $("#OperationDate").val(prDate);
                        $("#PurchaseOrderDate").val(prDate);
                    } else {
                        alert("Purchase Date must be between Year Closing Date and Entry Date");
                        $("#PurchaseDate").val("");
                        $("#DepCalcDate").val("");
                        $("#OperationDate").val("");
                        $("#PurchaseOrderDate").val("");
                    }
                }
            });      
           
        });

        $("#DepCalcDate").change(function () {
            var trxDate = $("#trxDate").val();
            var transactionDate = new Date(trxDate);

            var DepCalcDate = $("#DepCalcDate").val();
            var deprDate = new Date(DepCalcDate);

            if (transactionDate <= deprDate) {
            } else {
                alert("Depriciation Calculation Date must be same or greater than Entry Date");
                $("#DepCalcDate").val("");
            }
        });       
        $("#OperationDate").change(function () {
            var trxDate = $("#trxDate").val();
            var transactionDate = new Date(trxDate);

            var OperationDate = $("#OperationDate").val();
            var opDate = new Date(OperationDate);

            if (transactionDate <= opDate) {
            } else {
                alert("Operation Date must be same or greater than Entry Date");
                $("#OperationDate").val("");
            }
        });
        $("#PurchaseOrderDate").change(function () {            
            var PurchaseDate = $("#PurchaseDate").val();
            var PrDate = new Date(PurchaseDate);
            var PurchaseOrderDate = $("#PurchaseOrderDate").val();
            var poDate = new Date(PurchaseOrderDate);           

            if (PrDate >= poDate) {
                $("#PurchaseOrderDate").val(PurchaseOrderDate);
            } else {
                alert("Purchase Order Date must be same or less than Purchase Date");
                $("#PurchaseOrderDate").val("");
            }           
        });
        $("#Usable").val(1);

        // Office wise asset user
        $("#ddlHO").change(function () {
            var office_id = GetWorkingOffice();
            LoadOfficeWiseAssetUser(office_id);
            //$("#AssetGroupID").val('');
            //$("#AssetCode").val('');
            $("#AssetQuantity").val('');
            $("#AssetSerial").val('');
            $("#AssetQuantity").val(1).trigger('keyup');
        });
        $("#ddlZone").change(function () {
            
            var office_id = GetWorkingOffice();
            LoadOfficeWiseAssetUser(office_id);
            GetChangedOffice();
            //$("#AssetGroupID").val('');
            //$("#AssetCode").val('');
            $("#AssetQuantity").val('');
            $("#AssetSerial").val('');
            $("#AssetQuantity").val(1).trigger('keyup');
        });
        $("#ddlArea").change(function () {
            
            var office_id = GetWorkingOffice();
            LoadOfficeWiseAssetUser(office_id);
            GetChangedOffice();
            //$("#AssetGroupID").val('');
            //$("#AssetCode").val('');
            $("#AssetQuantity").val('');
            $("#AssetSerial").val('');
            $("#AssetQuantity").val(1).trigger('keyup');
        });
        $("#ddlOffice").change(function () {
            
            var office_id = GetWorkingOffice();
            LoadOfficeWiseAssetUser(office_id);
            GetChangedOffice();
            //$("#AssetGroupID").val('');
            //$("#AssetCode").val('');
            $("#AssetQuantity").val('');
            $("#AssetSerial").val('');
            $("#AssetQuantity").val(1).trigger('keyup');
        });
        // Office wise asset user

        $("#TransactionValue").val('');
        $("#UnitPrice").val('');
        $("#AccumulatedDepri").val('');
        $("#CurrentDepri").val('');
        $("#TransactionDate").val('');
        $("#DepCalcDate").val('');
        $("#btnUpdate").hide();
        //$("#btnReset").hide();
        $("#PurchaseDate").val('');


        $("#trxDate").datepicker(
           {
               dateFormat: "dd-M-yy",
               showAnim: "scale",
               changeMonth: true,
               changeYear: true,
                yearRange: '1950:2050'
           });

        $("#trxDate").datepicker('setDate', new Date());

       

        $("#DepCalcDate").datepicker(
          {
              dateFormat: "dd-M-yy",
              showAnim: "scale",
              changeMonth: true,
              changeYear: true,
              yearRange: '-10:+0'
          });
        $("#DepCalcDate").datepicker(
    'setDate', new Date());

        $("#PurchaseDate").datepicker(
         {
             dateFormat: "dd-M-yy",
             showAnim: "scale",
             changeMonth: true,
             changeYear: true,
             yearRange: '-10:+0'
         });
        $("#PurchaseDate").datepicker(
  'setDate', new Date());


        $("#OperationDate").datepicker(
         {
             dateFormat: "dd-M-yy",
             showAnim: "scale",
             changeMonth: true,
             changeYear: true,
             yearRange: '-10:+0'
         });
        $("#OperationDate").datepicker(
    'setDate', new Date());
        $("#InsuranceExpDate").datepicker(
         {
             dateFormat: "dd-M-yy",
             showAnim: "scale",
             changeMonth: true,
             changeYear: true,
             yearRange: '-10:+10'
         });

        $("#InsuranceExpDate").datepicker(
 'setDate', new Date() + 10);
        $("#PurchaseOrderDate").datepicker(
         {
             dateFormat: "dd-M-yy",
             showAnim: "scale",
             changeMonth: true,
             changeYear: true,
             yearRange: '-10:+0'
         });

        $("#PurchaseOrderDate").datepicker(
     'setDate', new Date());

        $("#btnReset").click(function () {
            $("#btnUpdate").hide();
            $("#btnReset").hide();
            $("#btnSave").show();
            location.reload();
        });
        $("#AssetCode").chosen();

        $("#AssetGroupID").change(function () {
            debugger;
            $("#AssetSerial").val("");
            var groupId = $("#AssetGroupID").val();
            var ddlAssetName = $("#AssetCode");
            var optionsItem = '';
            var depRate = $("#Deprate");
            if (groupId != "" || groupId != null) {
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetGroupWiseAssetInfo", "FixedAsset", "http")',
                    data: { GroupId: groupId },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        
                        if (data.viewAssetNameList.length > 0) {
                            ddlAssetName.empty('');
                            depRate.empty('');                            
                            optionsItem = optionsItem + "<option value=''>Please Select</option>";
                            $.each(data.viewAssetNameList, function (id, option) {
                                // ddlAssetName.append($('<option></option>').val(option.Value).html(option.Text));                               
                                optionsItem = optionsItem + '<option value="' + option.Value + '">' + option.Text + '</option>';
                            });
                            $("#Deprate").val(data.depRate);
                            $("#DepriciationMethod").val(data.depMethod);
                        } else {
                            ddlAssetName.html("<option value=''>Please Select</option>");
                        }
                    }
                });
                $(ddlAssetName).html(optionsItem).trigger("chosen:updated");
            }
            else {
                
                $("#AssetCode").html("<option value=''>Please Select</option>");
                $("#AssetSerial").val("");
            }
        });      

        $("#AssetQuantity").keypress(function (e) {
            return checkNumeric(e); 
        });

        $("#AssetQuantity").val(1);

        $("#AssetCode").change(function () {
            $("#AssetQuantity").val(1).trigger('keyup');            
            GetAssetWiseDailyTransactionInfo();
        });

        $("#AssetQuantity").keyup(function () {
            
            var office_id = GetWorkingOffice();
            var assetID = $("#AssetCode").val();
            var assetQuantity = $("#AssetQuantity").val();
            if (assetQuantity > parseInt(9999)) {
                alert('Asset Quantity must be equal or less than 9999');
                $("#AssetQuantity").val('');
                $("#AssetSerial").val('');
                return false;
            }
            if (office_id != "" && assetID != "" && assetQuantity != "") {
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetQuantityWiseAssetSerialForDailyEntry", "FixedAsset", "http")',
                    data: { officeID: office_id, assetID: assetID, assetQuantity: assetQuantity },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        if (data != null) {
                            $("#AssetSerial").empty('');                            
                            $("#AssetSerial").val(data[0].AssetSerial);
                        } else {
                            $("#AssetSerial").val('');
                        }
                    }
                });
            }
        });

        $("#UnitPrice").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#UnitPrice").keyup(function (e) {            
            CalTotalCost();
        });

        $("#InstallationCost").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#InstallationCost").keyup(function (e) {            
            CalTotalCost();
        });

        $("#CarringCost").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#CarringCost").keyup(function (e) {            
            CalTotalCost();
        });

        $("#OtherCost").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#OtherCost").keyup(function (e) {            
            CalTotalCost();
        });
        $(".CheckInstallmentExist").hide();

        $("#IsInstallmentAsset").change(function () {
            var checkInstallmentExist = $("#IsInstallmentAsset").is(':checked') ? 1 : 0;
            if (checkInstallmentExist == 1) {
                $(".CheckInstallmentExist").show();
            } else {
                $(".CheckInstallmentExist").hide();
                $("#UnitPrice").val('').attr('readonly', false);

            }
        });
        $("#DownPayment").val(0);
        $("#InstallmentNo").val(0);
        $("#InstallmentAmount").val(0);
        $("#BankName").val('N/A');
        $("#AccountNo").val('N/A');

        $("#UnitPrice").val(0);
        $("#InstallationCost").val(0);
        $("#CarringCost").val(0);
        $("#OtherCost").val(0);
        $("#TotalCost").val(0);
        $("#InsuranceValue").val(0);
        $("#WarrantyGurantee").val(0);
        $("#UsefulLifeYear").val(0);
        $("#PurchaseOrderNo").val(0);
        $("#Remarks").val('N/A');

        $("#DownPayment").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#DownPayment").keyup(function (e) {            
            CalCostOfprice();
        });

        $("#InstallmentNo").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#InstallmentNo").keyup(function (e) {            
            CalCostOfprice();
        });

        $("#InstallmentAmount").keypress(function (e) {
            return checkNumeric(e);            
        });
        $("#InstallmentAmount").keyup(function (e) {            
            CalCostOfprice();
        });

        $("#trxDate").change(function () {
            debugger;
            var entryDate = $("#trxDate").val();
            $("#PurchaseDate").val(entryDate);
            $("#DepCalcDate").val(entryDate);
            $("#OperationDate").val(entryDate);
            $("#PurchaseOrderDate").val(entryDate);
        });
    });    
    function checkNumeric(event) {
        var key = window.event ? event.keyCode : event.which;
        if (event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 46   // 8 = backspace, 9 = tab, 37 = left arrow,  39 = right arrow, 46 = delete                                                                                             
         || event.keyCode == 37 || event.keyCode == 39) {
            return true;
        }
        if (event.which === 13) {            // Carriage Return Value
            $(this).next().focus();
        }
        else if (key < 48 || key > 57) {       // 1 to 9 ASCII Character have between 48 to 57 keycode
            return false;
        }
        else return true;
    }
    function AssetGroupTriggerAfterSave() {
        debugger;        
            var groupId = $("#AssetGroupID").val();
            var ddlAssetName = $("#AssetCode");            
            var depRate = $("#Deprate");
            if (groupId != "" || groupId != null) {
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("GetGroupWiseAssetInfo", "FixedAsset", "http")',
                    data: { GroupId: groupId },
                    dataType: 'json',
                    async: false,
                    success: function (data) {
                        if (data.viewAssetNameList.length > 0) {                            
                            $("#Deprate").val(data.depRate);
                            $("#DepriciationMethod").val(data.depMethod);
                        } else {
                            $("#Deprate").val('');
                            $("#DepriciationMethod").val('');
                        }
                    }
                });               
            }           
        //});
    }



    function GetChangedOffice() {
        var office_id = GetWorkingOffice();
        $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("SelectOffice", "FixedAsset", "http")',
            data: { officeId: office_id },
            dataType: 'json',
            async: false,
            success: function (data) {
                $("#OfficeName").val(data.OfficeName);
                //location.reload();
            }
        });
        return true;
    }
    function GetWorkingOffice() {
        if ($("#ddlHO").val() > 0) {
            var office_id;
            if ($("#ddlZone").val() > 0) {
                if ($("#ddlArea").val() > 0) {
                    if ($("#ddlOffice").val() > 0) {
                        office_id = $("#ddlOffice").val();
                    }
                    else {
                        office_id = $("#ddlArea").val();
                    }
                }
                else {
                    office_id = $("#ddlZone").val();
                }
            }
            else {
                office_id = $("#ddlHO").val();
            }
        }
        return office_id;
    }
    function CalTotalCost() {
        var unitPrice = parseFloat($("#UnitPrice").val());
        var installationCost = $("#InstallationCost").val() == "" ? 0 : parseFloat($("#InstallationCost").val());
        var carringCost = $("#CarringCost").val() == "" ? 0 : parseFloat($("#CarringCost").val());
        var otherCost = $("#OtherCost").val() == "" ? 0 : parseFloat($("#OtherCost").val());
        if (unitPrice != "") {
            var totalCost = parseFloat(unitPrice + installationCost + carringCost + otherCost);
            $("#TotalCost").val(totalCost).attr('readonly', true);
        } else {
            $("#TotalCost").val('');
        }
    }   
    function CalCostOfprice() {
        var downPayment = parseInt($("#DownPayment").val());
        var installmentNo = parseInt($("#InstallmentNo").val());
        var installmentAmount = parseInt($("#InstallmentAmount").val());

        var costOfPrice = (downPayment + (installmentNo * installmentAmount));
        $("#UnitPrice").val(costOfPrice).attr('readonly', true).trigger('keyup');
    }
    function LoadOfficeWiseAssetUser(officeID) {
        if (officeID != "") {
            var ddlAssetUser = $("#AssetUser");
            $.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("GetOfficeWiseAssetUserList", "FixedAsset", "http")',
                data: { officeID: officeID },
                dataType: 'json',
                async: false,
                success: function (data) {
                    if (data.length > 0) {
                        ddlAssetUser.html('');
                        //$("#AssetUser").html("<option value='0'>Please Select</option>").selected;
                        $.each(data, function (id, option) {
                            ddlAssetUser.append($('<option></option>').val(option.Value).html(option.Text));
                        });
                    } else {
                        $("#AssetUser").html("<option value='0'>Please Select</option>");
                    }
                },
                error: function (request, status, error) {
                    alert(request.statusText + "/" + request.statusText + "/" + error);
                }
            });
        }
        else {
            $("#AssetUser").empty();
        }
    }
    function SaveDailyTransactionInfo() {
        
        var office_id = GetWorkingOffice();
        var transactionDate = $("#trxDate").val();
        var assetGroupID = $("#AssetGroupID").val();
        var assetCode = $("#AssetCode").val();
        var assetQuantity = $("#AssetQuantity").val();
        var assetSerial = $("#AssetSerial").val();
        var assetDescription = $("#AssetDescription").val();
        var unitPrice = $("#UnitPrice").val();
        var assetClientCode = $("#AssetClientCode").val();
        var tranType = $("#TransactionType").val();
        var assetUser = $("#AssetUser").val();
        var usable = $("#Usable").val() == 1 ? true : false;
        var depCalcDate = $("#DepCalcDate").val();
        var purchaseDate = $("#PurchaseDate").val();
        var operationDate = $("#OperationDate").val();
        var installationCost = $("#InstallationCost").val();
        var carringCost = $("#CarringCost").val();
        var otherCost = $("#OtherCost").val();
        var totalCost = $("#TotalCost").val();
        var totalOpeningBalanceCost = $("#TotalOpeningBalanceCost").val();
        var projectID = $("#ProjectID").val();
        var deprate = $("#Deprate").val();
        var deprMethod = $("#DepriciationMethod").val();
        var IsCapitalizedAsset = $('#IsCapitalizedAsset').is(':checked') ? 1 : 0;
        var IsInstallmentAsset = $("#IsInstallmentAsset").is(':checked') ? 1 : 0;
        var DownPayment = $("#DownPayment").val();
        var InstallmentNo = $("#InstallmentNo").val();
        var InstallmentAmount = $("#InstallmentAmount").val();
        var BankName = $("#BankName").val();
        var AccountNo = $("#AccountNo").val();
        var openingDepriciationBalance = $("#OpeningDepriciationBalance").val();
        var openingBookValue = $("#OpeningBookValue").val();
        var insuranceValue = $("#InsuranceValue").val();
        var insuranceExpDate = $("#InsuranceExpDate").val();
        var warrantyGurantee = $("#WarrantyGurantee").val();
        var usefulLifeYear = $("#UsefulLifeYear").val();
        var purchaseOrderNo = $("#PurchaseOrderNo").val();
        var purchaseOrderDate = $("#PurchaseOrderDate").val();
        var remarks = $("#Remarks").val();

        if (unitPrice == null || unitPrice == '' || unitPrice == 0 || totalCost == null || totalCost == '' || totalCost == 0) {
            alert('Cost of purchase and Total Price must be more than 0');
            return;
        }
        if (assetQuantity == null || assetQuantity == '' || assetQuantity == 0 ) {
            alert('Asset Quantity must be more than 0');
            return;
        }
        if (transactionDate != "" && assetGroupID != "" && assetCode != "" && assetQuantity != "" && assetSerial != "" && tranType != "" && unitPrice != "" && purchaseDate != "" && assetClientCode != "" && assetUser != "" && depCalcDate != "") {
            var FixedAssetUpdates = {
                OfficeID: office_id,
                TransactionDate: transactionDate,
                AssetGroupID: assetGroupID,
                AssetCode: assetCode,
                AssetSerial: assetSerial,
                AssetDescription: assetDescription,
                UnitPrice: unitPrice,
                AssetClientCode: assetClientCode,
                TransactionType: tranType,
                AssetUser: assetUser,
                Usable: usable,
                DepCalcDate: depCalcDate,
                PurchaseDate: purchaseDate,
                OperationDate: operationDate,
                InstallationCost: installationCost,
                CarringCost: carringCost,
                OtherCost: otherCost,
                TotalCost: totalCost,
                ProjectID: projectID,
                TotalOpeningBalanceCost: totalOpeningBalanceCost,
                Deprate: deprate,
                DepriciationMethod: deprMethod,
                IsCapitalizedAsset: IsCapitalizedAsset,
                IsInstallmentAsset: IsInstallmentAsset,
                OpeningDepriciationBalance: openingDepriciationBalance,
                OpeningBookValue: openingBookValue,
                InsuranceValue: insuranceValue,
                InsuranceExpDate: insuranceExpDate,
                WarrantyGurantee: warrantyGurantee,
                UsefulLifeYear: usefulLifeYear,
                PurchaseOrderNo: purchaseOrderNo,
                PurchaseOrderDate: purchaseOrderDate,
                Remarks: remarks,

                DownPayment: DownPayment,
                InstallmentNo: InstallmentNo,
                InstallmentAmount: InstallmentAmount,
                BankName: BankName,
                AccountNo: AccountNo

            };
            $.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("SaveDailyTransactionInfo", "FixedAsset", "http")',
                data: JSON.stringify({ fixedAssetUpdates: FixedAssetUpdates }),
                dataType: 'json',
                async: true,
                success: function (data) {                    
                    if (data.result == 1) {
                        $.alert.open("Success", data.message);                        
                        var obj = {
                            OfficeID: data.getOfficeID,
                            AssetID: data.getAssetID
                        };                        
                        GetDailyTransactionInfo(obj);
                        debugger;
                        AssetGroupTriggerAfterSave();
                        //$("#AssetGroupID").trigger('change');
                        $("#AssetQuantity").val(1).trigger('keyup');                                              
                        $("#AssetDescription").val('');
                        $("#IsInstallmentAsset").val(':checked', false);
                        $("#UnitPrice").val(0);
                        $("#InstallationCost").val(0);
                        $("#CarringCost").val(0);
                        $("#OtherCost").val(0);
                        $("#TotalCost").val(0);                       
                    } else {
                        $.alert.open("Error", data.message);
                        ClearForm();
                    }                    
                }

            });
        }
        else {
            $.alert.open("Error", "Please fill up required fields");
        }
    }
    function GetDailyTransactionInfo(data) {           //office_id, asset_ID
        
        $('#grid').jtable({
            paging: true,
            pageSize: 10,
            sorting: true,
            cache: false,
            actions: {
                listAction: function (postData, jtParams) {
                    return $.Deferred(function ($dfd) {
                        var office_id = data.OfficeID;
                        var asset_ID = data.AssetID;
                        $.ajax({
                            url: '/FixedAsset/GetDailyTransactionInfo?jtStartIndex=' + jtParams.jtStartIndex + '&jtPageSize=' + jtParams.jtPageSize + '&jtSorting=' + jtParams.jtSorting + '&officeID=' + office_id + '&assetID=' + asset_ID,
                            type: 'POST',
                            dataType: 'json',
                            data: postData,
                            cache: false,
                            success: function (data) {
                                $dfd.resolve(data);

                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                }

            },
            fields: {
                DailyTransactionId: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                OfficeName: {
                    width: '10%',
                    title: 'Office'
                },
                TransactionDate: {
                    width: '7%',
                    title: 'EntryDate'
                },
                AssetGroupID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                GroupName: {
                    width: '10%',
                    title: 'GroupName'
                },
                AssetID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AssetName: {
                    width: '10%',
                    title: 'AssetName'
                },
                AssetSerial: {
                    width: '10%',
                    title: 'AssetSerial',
                },
                AssetDescription: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                UnitPrice: {
                    width: '5%',
                    title: 'PurchaseCost',
                },
                TotalCost: {
                    width: '5%',
                    title: 'TotalCost',
                },
                ClientCode: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                TranType: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AssetUser: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },

                Usable: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DepCalcDate: {
                    width: '5%',
                    title: 'DepCalcDate',
                },
                PurchaseDate: {
                    width: '5%',
                    title: 'PurchaseDate',
                },
                OperationDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallationCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                CarringCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                OtherCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                ProjectID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                Deprate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DepriciationMethod: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InsuranceValue: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InsExpDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                WarrantyGurantee: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                UsefulLifeYear: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                PurchaseOrderNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                PurOrderDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                Remarks: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DownPayment: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallmentNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallmentAmount: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                BankName: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AccountNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                //EditLink: {
                //    title: "Edit",
                //    width: '2%',
                //    sorting: false,
                //    display: function (data) {
                //        return '<div class="text-center"><a href="#" OnClick="EditDailyTransactionInfo( ' + data.record.DailyTransactionId + ',' + "'" + data.record.TransactionDate + "'" + ',' + "'" + data.record.AssetGroupID + "'" + ',' + "'" + data.record.AssetID + "'" + ',' + "'" + data.record.AssetSerial + "'" + ',' + "'" + data.record.AssetDescription + "'" + ',' + "'" + data.record.UnitPrice + "'" +
                //            ',' + "'" + data.record.TotalCost + "'" + ',' + "'" + data.record.ClientCode + "'" + ',' + "'" + data.record.TranType + "'" + ',' + "'" + data.record.AssetUser + "'" + ',' + "'" + data.record.Usable + "'" + ',' + "'" + data.record.DepCalcDate + "'" +
                //            ',' + "'" + data.record.PurchaseDate + "'" + ',' + "'" + data.record.OperationDate + "'" + ',' + "'" + data.record.InstallationCost + "'" + ',' + "'" + data.record.CarringCost + "'" + ',' + "'" + data.record.OtherCost + "'" + ',' + "'" + data.record.ProjectID + "'" + ',' + "'" + data.record.Deprate + "'" + ',' + "'" + data.record.DepriciationMethod + "'" + ',' + "'" + data.record.InsuranceValue + "'" +
                //            ',' + "'" + data.record.InsExpDate + "'" + ',' + "'" + data.record.WarrantyGurantee + "'" + ',' + "'" + data.record.UsefulLifeYear + "'" + ',' + "'" + data.record.PurchaseOrderNo + "'" + ',' + "'" + data.record.PurOrderDate + "'" + ',' + "'" + data.record.Remarks + "'" +
                //            ',' + "'" + data.record.DownPayment + "'" + ',' + "'" + data.record.InstallmentNo + "'" + ',' + "'" + data.record.InstallmentAmount + "'" + ',' + "'" + data.record.BankName + "'" + ',' + "'" + data.record.AccountNo + "'" + ');"><i class="fa fa-pencil-square-o"></i></a></div>';
                //    }
                //},
                //Delete: {
                //    title: "Delete",
                //    width: '2%',
                //    display: function (data) {
                //        return '<div class="text-center"><a href="#" OnClick="DeleteDailyTransactionInfo(' + data.record.DailyTransactionId + ');"><i class="fa fa-trash-o"></i></a></div>';
                //    }
                //}
            }

        });
        $('#grid').jtable('load');
    }

    function GetAssetWiseDailyTransactionInfo() {        
        $('#grid').jtable({
            paging: true,
            pageSize: 10,
            sorting: true,
            cache: false,
            actions: {
                listAction: function (postData, jtParams) {
                    return $.Deferred(function ($dfd) {
                        var office_id = GetWorkingOffice();
                        var asset_ID = $("#AssetCode").val();
                        $.ajax({
                            url: '/FixedAsset/GetDailyTransactionInfo?jtStartIndex=' + jtParams.jtStartIndex + '&jtPageSize=' + jtParams.jtPageSize + '&jtSorting=' + jtParams.jtSorting + '&officeID=' + office_id + '&assetID=' + asset_ID,
                            type: 'POST',
                            dataType: 'json',
                            data: postData,
                            cache: false,
                            success: function (data) {
                                $dfd.resolve(data);

                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                }

            },
            fields: {
                DailyTransactionId: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                OfficeName: {
                    width: '10%',
                    title: 'Office'
                },
                TransactionDate: {
                    width: '7%',
                    title: 'EntryDate'
                },
                AssetGroupID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                GroupName: {
                    width: '10%',
                    title: 'GroupName'
                },
                AssetID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AssetName: {
                    width: '10%',
                    title: 'AssetName'
                },
                AssetSerial: {
                    width: '10%',
                    title: 'AssetSerial',
                },
                AssetDescription: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                UnitPrice: {
                    width: '5%',
                    title: 'PurchaseCost',
                },
                TotalCost: {
                    width: '5%',
                    title: 'TotalCost',
                },
                ClientCode: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                TranType: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AssetUser: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },

                Usable: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DepCalcDate: {
                    width: '5%',
                    title: 'DepCalcDate',
                },
                PurchaseDate: {
                    width: '5%',
                    title: 'PurchaseDate',
                },
                OperationDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallationCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                CarringCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                OtherCost: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                ProjectID: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                Deprate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DepriciationMethod: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InsuranceValue: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InsExpDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                WarrantyGurantee: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                UsefulLifeYear: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                PurchaseOrderNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                PurOrderDate: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                Remarks: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                DownPayment: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallmentNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                InstallmentAmount: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                BankName: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                AccountNo: {
                    key: true,
                    list: false,
                    create: false,
                    edit: false
                },
                //EditLink: {
                //    title: "Edit",
                //    width: '2%',
                //    sorting: false,
                //    display: function (data) {
                //        return '<div class="text-center"><a href="#" OnClick="EditDailyTransactionInfo( ' + data.record.DailyTransactionId + ',' + "'" + data.record.TransactionDate + "'" + ',' + "'" + data.record.AssetGroupID + "'" + ',' + "'" + data.record.AssetID + "'" + ',' + "'" + data.record.AssetSerial + "'" + ',' + "'" + data.record.AssetDescription + "'" + ',' + "'" + data.record.UnitPrice + "'" +
                //            ',' + "'" + data.record.TotalCost + "'" + ',' + "'" + data.record.ClientCode + "'" + ',' + "'" + data.record.TranType + "'" + ',' + "'" + data.record.AssetUser + "'" + ',' + "'" + data.record.Usable + "'" + ',' + "'" + data.record.DepCalcDate + "'" +
                //            ',' + "'" + data.record.PurchaseDate + "'" + ',' + "'" + data.record.OperationDate + "'" + ',' + "'" + data.record.InstallationCost + "'" + ',' + "'" + data.record.CarringCost + "'" + ',' + "'" + data.record.OtherCost + "'" + ',' + "'" + data.record.ProjectID + "'" + ',' + "'" + data.record.Deprate + "'" + ',' + "'" + data.record.DepriciationMethod + "'" + ',' + "'" + data.record.InsuranceValue + "'" +
                //            ',' + "'" + data.record.InsExpDate + "'" + ',' + "'" + data.record.WarrantyGurantee + "'" + ',' + "'" + data.record.UsefulLifeYear + "'" + ',' + "'" + data.record.PurchaseOrderNo + "'" + ',' + "'" + data.record.PurOrderDate + "'" + ',' + "'" + data.record.Remarks + "'" +
                //            ',' + "'" + data.record.DownPayment + "'" + ',' + "'" + data.record.InstallmentNo + "'" + ',' + "'" + data.record.InstallmentAmount + "'" + ',' + "'" + data.record.BankName + "'" + ',' + "'" + data.record.AccountNo + "'" + ');"><i class="fa fa-pencil-square-o"></i></a></div>';
                //    }
                //},
                //Delete: {
                //    title: "Delete",
                //    width: '2%',
                //    display: function (data) {
                //        return '<div class="text-center"><a href="#" OnClick="DeleteDailyTransactionInfo(' + data.record.DailyTransactionId + ');"><i class="fa fa-trash-o"></i></a></div>';
                //    }
                //}
            }

        });
        $('#grid').jtable('load');
    }


    function EditDailyTransactionInfo(DailyTransactionId, TransactionDate, AssetGroupID, AssetID, AssetSerial, AssetDescription, UnitPrice, TotalCost, ClientCode, TransactionType, AssetUser, Usable, DepCalcDate, PurchaseDate, OperationDate, InstallationCost, CarringCost,
        OtherCost, ProjectID, Deprate, DepriciationMethod, InsuranceValue, InsExpDate, WarrantyGurantee, UsefulLifeYear, PurchaseOrderNo, PurchaseOrderDate, Remarks, DownPayment, InstallmentNo, InstallmentAmount, BankName, AccountNo) {
        
        $("#DailyTransactionId").val(DailyTransactionId);        
        $("#trxDate").val(TransactionDate);
        $("#AssetGroupID").val(AssetGroupID).trigger('change');
        $("#AssetCode").val(AssetID);
        $("#AssetCode").trigger("chosen:updated");
        $("#AssetQuantity").attr('readonly', true);
        $("#AssetSerial").val(AssetSerial);
        $("#AssetDescription").val(AssetDescription);
        $("#UnitPrice").val(UnitPrice);
        $("#TotalCost").val(TotalCost);
        $("#AssetClientCode").val(ClientCode);

        $("#TransactionType").val(TransactionType);

        $("#AssetUser").val(AssetUser);
        $("#Usable").val(Usable == 'true' ? 1 : 0);
        $("#DepCalcDate").val(DepCalcDate);
        $("#PurchaseDate").val(PurchaseDate);
        $("#OperationDate").val(OperationDate);
        $("#InstallationCost").val(InstallationCost);
        $("#CarringCost").val(CarringCost);
        $("#OtherCost").val(OtherCost);
        $("#ProjectID").val(ProjectID);
        $("#Deprate").val(Deprate);
        $("#DepriciationMethod").val(DepriciationMethod);
        $("#InsuranceValue").val(InsuranceValue);
        $("#InsuranceExpDate").val(InsExpDate);
        $("#WarrantyGurantee").val(WarrantyGurantee);
        $("#UsefulLifeYear").val(UsefulLifeYear);
        $("#PurchaseOrderNo").val(PurchaseOrderNo);
        $("#PurchaseOrderDate").val(PurchaseOrderDate);
        $("#Remarks").val(Remarks);

        $("#DownPayment").val(DownPayment);
        $("#InstallmentNo").val(InstallmentNo);
        $("#InstallmentAmount").val(InstallmentAmount);
        $("#BankName").val(BankName);
        $("#AccountNo").val(AccountNo);

        $("#btnUpdate").show();
        $("#btnReset").show();
        $("#btnSave").hide();
        $("#btnRegister").hide();
    }

    function UpdateDailyTransactionInfo() {
        var office_id = GetWorkingOffice();
        var DailyTransactionId = $("#DailyTransactionId").val();
        var transactionDate = $("#trxDate").val();
        var assetGroupID = $("#AssetGroupID").val();
        var assetCode = $("#AssetCode").val();
        var assetQuantity = $("#AssetQuantity").val();
        var assetSerial = $("#AssetSerial").val();
        var assetDescription = $("#AssetDescription").val();
        var unitPrice = $("#UnitPrice").val();
        var assetClientCode = $("#AssetClientCode").val();

        var tranType = $("#TransactionType").val();

        var assetUser = $("#AssetUser").val();
        var usable = $("#Usable").val() == 1 ? true : false;
        var depCalcDate = $("#DepCalcDate").val();
        var purchaseDate = $("#PurchaseDate").val();
        var operationDate = $("#OperationDate").val();
        var installationCost = $("#InstallationCost").val();
        var carringCost = $("#CarringCost").val();
        var otherCost = $("#OtherCost").val();
        var totalCost = $("#TotalCost").val();
        var totalOpeningBalanceCost = $("#TotalOpeningBalanceCost").val();
        var projectID = $("#ProjectID").val();
        var deprate = $("#Deprate").val();
        var deprMethod = $("#DepriciationMethod").val();

        var IsCapitalizedAsset = $('#IsCapitalizedAsset').is(':checked') ? 1 : 0;
        var IsInstallmentAsset = $("#IsInstallmentAsset").is(':checked') ? 1 : 0;

        var DownPayment = $("#DownPayment").val();
        var InstallmentNo = $("#InstallmentNo").val();
        var InstallmentAmount = $("#InstallmentAmount").val();
        var BankName = $("#BankName").val();
        var AccountNo = $("#AccountNo").val();

        var openingDepriciationBalance = $("#OpeningDepriciationBalance").val();
        var openingBookValue = $("#OpeningBookValue").val();
        var insuranceValue = $("#InsuranceValue").val();
        var insuranceExpDate = $("#InsuranceExpDate").val();
        var warrantyGurantee = $("#WarrantyGurantee").val();
        var usefulLifeYear = $("#UsefulLifeYear").val();
        var purchaseOrderNo = $("#PurchaseOrderNo").val();
        var purchaseOrderDate = $("#PurchaseOrderDate").val();
        var remarks = $("#Remarks").val();

        if (transactionDate != "" && assetGroupID != "" && assetCode != "" && assetSerial != "" && unitPrice != "" && assetClientCode != "" && assetUser != "" && usable != "" && depCalcDate != "") {
            var FixedAssetUpdates = {
                OfficeID: office_id,
                DailyTransactionId: DailyTransactionId,
                TransactionDate: transactionDate,
                AssetGroupID: assetGroupID,
                AssetCode: assetCode,
                AssetSerial: assetSerial,
                AssetDescription: assetDescription,
                UnitPrice: unitPrice,
                AssetClientCode: assetClientCode,
                TransactionType: tranType,
                AssetUser: assetUser,
                Usable: usable,
                DepCalcDate: depCalcDate,
                PurchaseDate: purchaseDate,
                OperationDate: operationDate,
                InstallationCost: installationCost,
                CarringCost: carringCost,
                OtherCost: otherCost,
                TotalCost: totalCost,
                ProjectID: projectID,
                TotalOpeningBalanceCost: totalOpeningBalanceCost,
                Deprate: deprate,
                DepriciationMethod: deprMethod,
                IsCapitalizedAsset: IsCapitalizedAsset,
                IsInstallmentAsset: IsInstallmentAsset,
                OpeningDepriciationBalance: openingDepriciationBalance,
                OpeningBookValue: openingBookValue,
                InsuranceValue: insuranceValue,
                InsuranceExpDate: insuranceExpDate,
                WarrantyGurantee: warrantyGurantee,
                UsefulLifeYear: usefulLifeYear,
                PurchaseOrderNo: purchaseOrderNo,
                PurchaseOrderDate: purchaseOrderDate,
                Remarks: remarks,

                DownPayment: DownPayment,
                InstallmentNo: InstallmentNo,
                InstallmentAmount: InstallmentAmount,
                BankName: BankName,
                AccountNo: AccountNo
            };
            $.ajax({
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("UpdateDailyTransactionInfo", "FixedAsset", "http")',
                data: JSON.stringify({ fixedAssetUpdates: FixedAssetUpdates }),
                dataType: 'json',
                async: true,
                success: function (data) {
                    
                    if (data.result == 1) {
                        $.alert.open("Success", data.message);
                        //var office_id = data.OfficeID;
                        //var asset_ID = data.AssetID;
                        GetDailyTransactionInfo(data);//office_id, asset_ID
                        $("#AssetGroupID").val('');
                        $("#AssetCode").val('');
                        $("#AssetQuantity").val(1).attr('readonly', false);
                        $("#AssetSerial").val('');
                        $("#AssetDescription").val('');
                        $("#IsInstallmentAsset").val(':checked', false);
                        $("#UnitPrice").val(0);
                        $("#InstallationCost").val(0);
                        $("#CarringCost").val(0);
                        $("#OtherCost").val(0);
                        $("#TotalCost").val(0);
                        $("#Deprate").val('');
                        $("#DepriciationMethod").val('');

                        $("#btnUpdate").hide();
                        $("#btnReset").hide();
                        $("#btnSave").show();
                    } else {
                        $.alert.open("Error", data.message);
                        ClearForm();
                    }
                }

            });
        }
        else {
            $.alert.open("Error", "Please fill up required fields");
        }
    }
    function ClearForm() {
        $("#trxDate").val('');
        $("#AssetGroupID").val('');
        $("#AssetCode").val('');
        $("#AssetQuantity").val('');
        $("#AssetSerial").val('');
        $("#AssetDescription").val('');
        $("#IsInstallmentAsset").val(':checked', false);
        $("#DownPayment").val('');
        $("#InstallmentNo").val('');
        $("#InstallmentAmount").val('');
        $("#BankName").val('');
        $("#AccountNo").val('');
        $("#UnitPrice").val('');
        $("#AssetClientCode").val('');
        $("#TransactionType").val('');
        $("#AssetUser").val('');
        $("#Usable").val('');
        $("#DepCalcDate").val('');

        $("#PurchaseDate").val('');
        $("#OperationDate").val('');
        $("#InstallationCost").val('');
        $("#CarringCost").val('');
        $("#OtherCost").val('');
        $("#TotalCost").val('');
        $("#Deprate").val('');
        $("#DepriciationMethod").val('');
        $("#OpeningBookValue").val('');
        $("#InsuranceValue").val('');
        $("#InsuranceExpDate").val('');
        $("#WarrantyGurantee").val('');
        $("#UsefulLifeYear").val('');
        $("#PurchaseOrderNo").val('');
        $("#PurchaseOrderDate").val('');
        $("#Remarks").val('');
    }
    function DeleteDailyTransactionInfo(DailyTransactionId) {
        $.alert.open('confirm', 'Are you sure you want to delete this record?', function (button) {
            if (button == 'yes') {
                $.ajax({
                    type: 'GET',
                    contentType: "application/json; charset=utf-8",
                    url: '@Url.Action("DeleteDailyTransactionInfo", "FixedAsset", "http")',
                    data: { DailyTransactionId: DailyTransactionId },
                    dataType: 'json',
                    async: true,
                    success: function (data) {
                        if (data.result == 1) {
                            $.alert.open("Success", data.message);
                            //GetDailyTransactionInfo();
                            $('#grid').jtable('load');
                        } else {
                            $.alert.open("Error", data.message);
                        }
                    },
                });
                return true;
            }
            else {
                hiddenField.value = 'false';
                return false;
            }
        });
    }


</script>

<h2 class="page-title">Asset Daily Entry</h2>
<div class="form-horizontal" id="dayInitialDependent">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.DailyTransactionId)

    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title panel-title-OfficeSelection">
                <a data-toggle="collapse" data-parent="#accordion" href="#collapseOfficeSelection"><i class="fa fa-plus"></i>&nbsp;Office Selection</a>
            </h4>
        </div>
        @*<div id="collapseOfficeSelection" class="panel-collapse collapse">*@
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Head Office</label>
                        <div class="col-sm-7">
                            @Html.DropDownList("HOList", null, new { @ID = "ddlHO", @class = "form-control" })
                        </div>
                        @Html.Label(ViewData["OfficeLevel"].ToString(), new { @ID = "lblOffcLevel", style = "display:none;" })
                        @Html.Label(ViewData["FirstLevel"].ToString(), new { @ID = "lblFirstLevel", style = "display:none;" })
                        @Html.Label(ViewData["SecondLevel"].ToString(), new { @ID = "lblSecondLevel", style = "display:none;" })
                        @Html.Label(ViewData["ThirdLevel"].ToString(), new { @ID = "lblThirdLevel", style = "display:none;" })
                        @Html.Label(ViewData["FourthLevel"].ToString(), new { @ID = "lblFourthLevel", style = "display:none;" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Zone Office</label>
                        <div class="col-sm-7">
                            @Html.DropDownList("ZoneList", null, new { @ID = "ddlZone", @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Area Office</label>
                        <div class="col-sm-7">
                            @Html.DropDownList("AreaList", null, new { @ID = "ddlArea", @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Branch Office</label>
                        <div class="col-sm-7">
                            @Html.DropDownList("OfficeList", null, new { @ID = "ddlOffice", @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @*Ends Office Selection*@

    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title panel-title-DailyEntry">
                <a data-toggle="collapse" data-parent="#accordion" href="#collapseAssetDailyEntry"><i class="fa fa-plus"></i>&nbsp;Asset Daily Entry</a>
            </h4>
        </div>
        @*<div id="collapseAssetDailyEntry" class="panel-collapse collapse">*@
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Entry Date</label>
                        <div class="col-sm-7">
                            @Html.TextBox(" ", ViewData["TrxDate"], new { @ID = "trxDate", @class = "form-control", @autocomplete = "off" })
                            @Html.HiddenFor(model => model.TransactionDate)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4"><span style="color:red; font-size:15px;">Asset Group</span></label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.AssetGroupID, Model.AssetGroupIdList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4 required"><span style="color:red; font-size:15px;">Asset Code</span></label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.AssetCode, Model.AssetCodeList, new { @class = "form-control hidden-validation" })
                            @*@Html.ActionLink("Add New", "/AssetInformationEntry", null, new { @class = "btn btn-primary btn-sm", @target = "_blank" })*@
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4"><span style="color:red; font-size:15px;">Asset Quantity</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.AssetQuantity, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Asset Serial <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.AssetSerial, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Asset Description</label>
                        <div class="col-sm-7">
                            @Html.TextAreaFor(model => model.AssetDescription, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Installment Asset </label>
                        <div class="col-sm-7">
                            <input type="checkbox" id="IsInstallmentAsset" style="margin-top:12px;" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 CheckInstallmentExist">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Down Payment</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.DownPayment, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row CheckInstallmentExist">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Installment No <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.InstallmentNo, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Installment Amount<span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.InstallmentAmount, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row CheckInstallmentExist">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Bank Name </label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.BankName, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Acc/Card No</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.AccountNo, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4"><span style="color:red; font-size:15px;">Cost of Purchase</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.UnitPrice, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4"><span style="color:red; font-size:15px;">Purchase Date</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.PurchaseDate, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Supplier <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.AssetClientCode, Model.ClientList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Transaction Type <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.TransactionType, Model.TransactionTypeList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">AssetUser <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.AssetUser, Model.EmployeeList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Usable</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.Usable, Model.UsableList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Dep. Calculation Date <span style="color:red; font-size:15px;">*</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.DepCalcDate, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Operation Date</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.OperationDate, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Installation Cost</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.InstallationCost, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Carring Cost</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.CarringCost, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Other Cost</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.OtherCost, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4"><span style="color:red; font-size:15px;">Total Cost</span></label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.TotalCost, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Project/Fund</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.ProjectID, Model.ProjectList, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Depriciation Rate (%)</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.Deprate, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Depriciation Method</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(model => model.DepriciationMethod, Model.DepriciationMethodList, new { @class = "form-control", @disabled = "true" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Capitalized Asset </label>
                        <div class="col-sm-7">
                            <input type="checkbox" id="IsCapitalizedAsset" style="margin-top:12px;" checked />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Insurance Value</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.InsuranceValue, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Insurance Expired Date</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.InsuranceExpDate, new { @class = "form-control", @autocomplete = "off" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Warranty/Gurantee (Year)</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.WarrantyGurantee, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Useful Life (Months)</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.UsefulLifeYear, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Purchase Order No</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.PurchaseOrderNo, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Purchase Order Date</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(model => model.PurchaseOrderDate, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label class="control-label col-sm-4">Remarks</label>
                        <div class="col-sm-7">
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="row">
                    <div class="col-sm-offset-4">
                        <input type="button" value="Save" id="btnSave" class="btn btn-primary" onclick="SaveDailyTransactionInfo()" />
                        <input type="button" value="Update" id="btnUpdate" class="btn btn-primary" onclick="UpdateDailyTransactionInfo()" />
                        <input type="button" value="Reset" id="btnReset" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<br />
<div class="row">
    <div class="col-md-12">
        <div id="grid"></div>
    </div>
</div>
@*</div>
    </div>*@
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/gbUtility")
    @Scripts.Render("~/bundles/jtable")

}

